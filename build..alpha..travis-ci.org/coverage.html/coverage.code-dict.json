{"/home/travis/build/npmtest/node-npmtest-protobufjs/test.js":"/* istanbul instrument in package npmtest_protobufjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protobufjs/lib.npmtest_protobufjs.js":"/* istanbul instrument in package npmtest_protobufjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_protobufjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_protobufjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-protobufjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-protobufjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_protobufjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_protobufjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_protobufjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_protobufjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_protobufjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_protobufjs.__dirname + '/lib.npmtest_protobufjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/index.js":"// full library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index\");\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/index.js":"\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-light\");\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\nprotobuf.common           = require(\"./common\");\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/index-light.js":"\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-minimal\");\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/index-minimal.js":"\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/writer.js":"\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/util/minimal.js":"\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/*\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @typedef Buffer\r\n * @type {Uint8Array}\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/*\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {function} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>=} properties Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message}\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n * @deprecated since 6.7.0 static code does not emit lazy types anymore\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations. Longs, enums and bytes are converted to strings by default.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/util/longbits.js":"\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/writer_buffer.js":"\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/reader.js":"\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/reader_buffer.js":"\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/rpc.js":"\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/rpc/service.js":"\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object.<string,*>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n *\r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object.<string,*>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/encoder.js":"\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    types    = require(\"./types\"),\r\n    util     = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/enum.js":"\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @typedef EnumDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {EnumDescriptor} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns {EnumDescriptor} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/object.js":"\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/util.js":"\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(\"./util/minimal\");\r\n\r\nutil.codegen = require(\"@protobufjs/codegen\");\r\nutil.fetch   = require(\"@protobufjs/fetch\");\r\nutil.path    = require(\"@protobufjs/path\");\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/types.js":"\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/decoder.js":"\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/verifier.js":"\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    util      = require(\"./util\");\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/converter.js":"\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(\"./enum\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/namespace.js":"\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    Field    = require(\"./field\"),\r\n    util     = require(\"./util\");\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @typedef NamespaceDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedDescriptor>} nested Nested object descriptors\r\n */\r\n\r\n/**\r\n * Namespace base descriptor.\r\n * @typedef NamespaceBaseDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionFieldDescriptor\r\n * @type {ExtensionFieldDescriptor|ExtensionMapFieldDescriptor}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedDescriptor\r\n * @type {EnumDescriptor|TypeDescriptor|ServiceDescriptor|AnyExtensionFieldDescriptor|NamespaceDescriptor}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionFieldDescriptor exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns {NamespaceBaseDescriptor} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedDescriptor>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/field.js":"\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @typedef FieldDescriptor\r\n * @type {Object}\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @typedef ExtensionFieldDescriptor\r\n * @type {Object}\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {string} extend Extended type\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {FieldDescriptor} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns {FieldDescriptor} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(\"./type\");\r\n\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/root.js":"\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {NamespaceDescriptor} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/type.js":"\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    Service   = require(\"./service\"),\r\n    Class     = require(\"./class\"),\r\n    Message   = require(\"./message\"),\r\n    Reader    = require(\"./reader\"),\r\n    Writer    = require(\"./writer\"),\r\n    util      = require(\"./util\"),\r\n    encoder   = require(\"./encoder\"),\r\n    decoder   = require(\"./decoder\"),\r\n    verifier  = require(\"./verifier\"),\r\n    converter = require(\"./converter\");\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                Class(this, ctor);\r\n            else\r\n                this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @typedef TypeDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Message type options\r\n * @property {Object.<string,OneOfDescriptor>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,FieldDescriptor>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {TypeDescriptor} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns {TypeDescriptor} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/oneof.js":"\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(\"./field\");\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @typedef OneOfDescriptor\r\n * @type {Object}\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {OneOfDescriptor} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns {OneOfDescriptor} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/mapfield.js":"\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @typedef MapFieldDescriptor\r\n * @type {Object}\r\n * @property {string} keyType Key type\r\n * @property {string} type Value type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @typedef ExtensionMapFieldDescriptor\r\n * @type {Object}\r\n * @property {string} keyType Key type\r\n * @property {string} type Value type\r\n * @property {number} id Field id\r\n * @property {string} extend Extended type\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {MapFieldDescriptor} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns {MapFieldDescriptor} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/service.js":"\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(\"./method\"),\r\n    util   = require(\"./util\"),\r\n    rpc    = require(\"./rpc\");\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @typedef ServiceDescriptor\r\n * @type {Object}\r\n * @property {Object.<string,*>} [options] Service options\r\n * @property {Object.<string,MethodDescriptor>} methods Method descriptors\r\n * @property {Object.<string,AnyNestedDescriptor>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {ServiceDescriptor} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns {ServiceDescriptor} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/method.js":"\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * @typedef MethodDescriptor\r\n * @type {Object}\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {MethodDescriptor} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns {MethodDescriptor} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/class.js":"\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(\"./message\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(\"./type\");\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = Class.generate(type).eof(type.name); // named constructor function (codegen is required anyway)\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} type Type to use\r\n * @returns {Codegen} Codegen instance\r\n */\r\nClass.generate = function generate(type) { // eslint-disable-line no-unused-vars\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"p\");\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < type.fieldsArray.length; ++i)\r\n        if ((field = type._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n * @deprecated since 6.7.0 it's possible to just assign a new constructor to {@link Type#ctor}\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/message.js":"\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object.<string,*>} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/tokenize.js":"\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(setCommentRe, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number=} trailingLine Trailing line number if applicable\r\n     * @returns {?string} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret;\r\n        if (trailingLine === undefined)\r\n            ret = commentLine === line - 1 && commentText || null;\r\n        else {\r\n            if (!commentText)\r\n                peek();\r\n            ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n        }\r\n        commentType = commentText = null;\r\n        commentLine = 0;\r\n        return ret;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: cmnt\r\n    };\r\n    /* eslint-enable callback-return */\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/parse.js":"\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(\"./tokenize\"),\r\n    Root      = require(\"./root\"),\r\n    Type      = require(\"./type\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Enum      = require(\"./enum\"),\r\n    Service   = require(\"./service\"),\r\n    Method    = require(\"./method\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line();\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // any type (not just packable types) because enums also use varint encoding and it is not\r\n        // yet known whether a type is an enum or not.\r\n        if (!isProto3 && field.repeated)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(enm, token);\r\n                skip(\";\");\r\n            } else\r\n                parseEnumValue(enm, token);\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/common.js":"\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/debug.js":"// experimental - debug library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-debug\");\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/src/index-debug.js":"// WARNING: highly experimental.\r\n// might eventually become a starting point for a real debug build.\r\n\r\n\"use strict\";\r\nvar protobuf = module.exports = require(\"./index\");\r\n\r\n/**\r\n * Debugging utility functions. Only present in debug builds.\r\n * @namespace\r\n */\r\nvar debug = protobuf.debug = {};\r\n\r\nvar codegen = protobuf.util.codegen;\r\n\r\nvar debugFnRe = /function ([^(]+)\\(([^)]*)\\) {/g;\r\n\r\n// Counts number of calls to any generated function\r\nfunction codegen_debug() {\r\n    codegen_debug.supported = codegen.supported;\r\n    codegen_debug.verbose = codegen.verbose;\r\n    var gen = codegen.apply(null, Array.prototype.slice.call(arguments));\r\n    gen.str = (function(str) { return function str_debug() {\r\n        return str.apply(null, Array.prototype.slice.call(arguments)).replace(debugFnRe, \"function $1($2) {\\n\\t$1.calls=($1.calls|0)+1\");\r\n    };})(gen.str);\r\n    return gen;\r\n}\r\n\r\n/**\r\n * Returns a list of unused types within the specified root.\r\n * @param {NamespaceBase} ns Namespace to search\r\n * @returns {Type[]} Unused types\r\n */\r\ndebug.unusedTypes = function unusedTypes(ns) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(ns instanceof protobuf.Namespace))\r\n        throw TypeError(\"ns must be a Namespace\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!ns.nested)\r\n        return [];\r\n\r\n    var unused = [];\r\n    for (var names = Object.keys(ns.nested), i = 0; i < names.length; ++i) {\r\n        var nested = ns.nested[names[i]];\r\n        if (nested instanceof protobuf.Type) {\r\n            var calls = (nested.encode.calls|0)\r\n                      + (nested.decode.calls|0)\r\n                      + (nested.verify.calls|0)\r\n                      + (nested.toObject.calls|0)\r\n                      + (nested.fromObject.calls|0);\r\n            if (!calls)\r\n                unused.push(nested);\r\n        } else if (nested instanceof protobuf.Namespace)\r\n            Array.prototype.push.apply(unused, unusedTypes(nested));\r\n    }\r\n    return unused;\r\n};\r\n\r\n/**\r\n * Enables debugging extensions.\r\n * @returns {undefined}\r\n */\r\ndebug.enable = function enable() {\r\n    protobuf.util.codegen = codegen_debug;\r\n};\r\n\r\n/**\r\n * Disables debugging extensions.\r\n * @returns {undefined}\r\n */\r\ndebug.disable = function disable() {\r\n    protobuf.util.codegen = codegen;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/light.js":"// light library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-light\");","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/minimal.js":"// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/runtime.js":"// deprecated - compatibility layer for v6.5 and earlier (now named \"minimal\")\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/bench/prof.js":"\"use strict\";\r\n\r\nvar fs   = require(\"fs\"),\r\n    path = require(\"path\");\r\n\r\n// A profiling stub to measure encoding / decoding performance using benchmark data.\r\n\r\nvar commands = [\"encode\", \"decode\", \"encode-browser\", \"decode-browser\", \"fromjson\"];\r\nif (commands.indexOf(process.argv[2]) < 0) { // 0: node, 1: prof.js\r\n    process.stderr.write(\"usage: \" + path.basename(process.argv[1]) + \" <\" + commands.join(\"|\") + \"> [iterations=10000000]\\n\");\r\n    return;\r\n}\r\n\r\n// Spin up a node process with profiling enabled and process the generated log\r\nif (process.execArgv.indexOf(\"--prof\") < 0) {\r\n    process.stdout.write(\"cleaning up old logs ...\\n\");\r\n    var child_process = require(\"child_process\");\r\n    var logRe = /^isolate-[0-9A-F]+-v8\\.log$/;\r\n    fs.readdirSync(process.cwd()).forEach(function readdirSync_it(file) {\r\n        if (logRe.test(file))\r\n            fs.unlink(file);\r\n    });\r\n    process.stdout.write(\"generating profile (may take a while) ...\\n\");\r\n    child_process.execSync(\"node --prof --trace-deopt \" + process.execArgv.join(\" \") + \" \" + process.argv.slice(1).join(\" \"), {\r\n        cwd: process.cwd(),\r\n        stdio: \"inherit\"\r\n    });\r\n    process.stdout.write(\"processing profile ...\\n\");\r\n    fs.readdirSync(process.cwd()).forEach(function readdirSync_it(file) {\r\n        if (logRe.test(file)) {\r\n            child_process.execSync(\"node --prof-process \" + file, {\r\n                cwd: process.cwd(),\r\n                stdio: \"inherit\"\r\n            });\r\n            // fs.unlink(file);\r\n        }\r\n    });\r\n    process.stdout.write(\"done.\\n\");\r\n    return;\r\n}\r\n\r\n// Actual profiling code\r\nvar protobuf = require(\"..\");\r\n\r\n// protobuf.util.codegen.verbose = true;\r\n\r\nvar root, json;\r\n\r\nif (process.argv[2] === \"fromjson\") {\r\n    json = require(\"../tests/data/test.json\");\r\n    if (process.argv.indexOf(\"--resolve\") < 0)\r\n        for (var k = 0; k < 10000; ++k)\r\n            protobuf.Root.fromJSON(json);\r\n    else\r\n        for (var l = 0; l < 10000; ++l)\r\n            protobuf.Root.fromJSON(json).resolveAll();\r\n    return;\r\n}\r\n\r\nvar Test, data, count;\r\n\r\nif (process.argv.indexOf(\"--alt\") < 0) {\r\n    root = protobuf.parse(fs.readFileSync(require.resolve(\"../bench/data/bench.proto\")).toString(\"utf8\")).root;\r\n    Test = root.lookup(\"Test\");\r\n    json = JSON.stringify(root);\r\n    data = require(\"../bench/data/bench.json\");\r\n    count = 10000000;\r\n    process.stdout.write(\"bench.proto\");\r\n} else {\r\n    root = protobuf.parse(fs.readFileSync(require.resolve(\"../tests/data/mapbox/vector_tile.proto\")).toString(\"utf8\")).root;\r\n    Test = root.lookup(\"vector_tile.Tile\");\r\n    data = Test.decode(fs.readFileSync(require.resolve(\"../tests/data/mapbox/vector_tile.bin\")));\r\n    count = 1000;\r\n    process.stdout.write(\"vector_tile.proto\");\r\n}\r\n\r\nif (process.argv.length > 3 && /^\\d+$/.test(process.argv[3]))\r\n    count = parseInt(process.argv[3], 10);\r\nprocess.stdout.write(\" x \" + count + \"\\n\");\r\n\r\nfunction setupBrowser() {\r\n    protobuf.Writer.create = function create_browser() { return new protobuf.Writer(); };\r\n    protobuf.Reader.create = function create_browser(buf) { return new protobuf.Reader(buf); };\r\n}\r\n\r\nswitch (process.argv[2]) {\r\n    case \"encode-browser\":\r\n        setupBrowser();\r\n        // eslint-disable-line no-fallthrough\r\n    case \"encode\":\r\n        for (var i = 0; i < count; ++i)\r\n            Test.encode(data).finish();\r\n        break;\r\n    case \"decode-browser\":\r\n        setupBrowser();\r\n        // eslint-disable-line no-fallthrough\r\n    case \"decode\":\r\n        var buf = Test.encode(data).finish();\r\n        for (var j = 0; j < count; ++j)\r\n            Test.decode(buf);\r\n        break;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/bench/suite.js":"\"use strict\";\r\nmodule.exports = newSuite;\r\n\r\nvar benchmark = require(\"benchmark\"),\r\n    chalk     = require(\"chalk\");\r\n\r\nvar padSize = 23;\r\n\r\nfunction newSuite(name) {\r\n    var benches = [];\r\n    return new benchmark.Suite(name)\r\n    .on(\"add\", function(event) {\r\n        benches.push(event.target);\r\n    })\r\n    .on(\"start\", function() {\r\n        process.stdout.write(chalk.white.bold(\"benchmarking \" + name + \" performance ...\") + \"\\n\\n\");\r\n    })\r\n    .on(\"cycle\", function(event) {\r\n        process.stdout.write(String(event.target) + \"\\n\");\r\n    })\r\n    .on(\"complete\", function() {\r\n        if (benches.length > 1) {\r\n            benches.sort(function(a, b) { return getHz(b) - getHz(a); });\r\n            var fastest   = benches[0],\r\n                fastestHz = getHz(fastest);\r\n            process.stdout.write(\"\\n\" + chalk.white(pad(fastest.name, padSize)) + \" was \" + chalk.green(\"fastest\") + \"\\n\");\r\n            benches.slice(1).forEach(function(bench) {\r\n                var hz = getHz(bench);\r\n                var percent = 1 - hz / fastestHz;\r\n                process.stdout.write(chalk.white(pad(bench.name, padSize)) + \" was \" + chalk.red((percent * 100).toFixed(1) + \"% ops/sec slower (factor \" + (fastestHz / hz).toFixed(1) + \")\") + \"\\n\");\r\n            });\r\n        }\r\n        process.stdout.write(\"\\n\");\r\n    });\r\n}\r\n\r\nfunction getHz(bench) {\r\n    return 1 / (bench.stats.mean + bench.stats.moe);\r\n}\r\n\r\nfunction pad(str, len, l) {\r\n    while (str.length < len)\r\n        str = l ? str + \" \" : \" \" + str;\r\n    return str;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/pbjs.js":"\"use strict\";\r\nvar path     = require(\"path\"),\r\n    fs       = require(\"fs\"),\r\n    pkg      = require(\"./package.json\"),\r\n    util     = require(\"./util\");\r\n\r\nutil.setup();\r\n\r\nvar protobuf = require(util.pathToProtobufJs),\r\n    minimist = require(\"minimist\"),\r\n    chalk    = require(\"chalk\"),\r\n    glob     = require(\"glob\");\r\n\r\nvar targets  = util.requireAll(\"./targets\");\r\n\r\n/**\r\n * Runs pbjs programmatically.\r\n * @param {string[]} args Command line arguments\r\n * @param {function(?Error, string=)} [callback] Optional completion callback\r\n * @returns {number|undefined} Exit code, if known\r\n */\r\nexports.main = function main(args, callback) {\r\n    var lintDefault = \"eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins\";\r\n    var argv = minimist(args, {\r\n        alias: {\r\n            target: \"t\",\r\n            out: \"o\",\r\n            path: \"p\",\r\n            wrap: \"w\",\r\n            root: \"r\",\r\n            lint: \"l\",\r\n            // backward compatibility:\r\n            \"force-long\": \"strict-long\",\r\n            \"force-message\": \"strict-message\"\r\n        },\r\n        string: [ \"target\", \"out\", \"path\", \"wrap\", \"root\", \"lint\" ],\r\n        boolean: [ \"create\", \"encode\", \"decode\", \"verify\", \"convert\", \"delimited\", \"beautify\", \"comments\", \"es6\", \"sparse\", \"keep-case\", \"force-long\", \"force-message\" ],\r\n        default: {\r\n            target: \"json\",\r\n            create: true,\r\n            encode: true,\r\n            decode: true,\r\n            verify: true,\r\n            convert: true,\r\n            delimited: true,\r\n            beautify: true,\r\n            comments: true,\r\n            es6: null,\r\n            lint: lintDefault,\r\n            \"keep-case\": false,\r\n            \"force-long\": false,\r\n            \"force-message\": false\r\n        }\r\n    });\r\n\r\n    var target = targets[argv.target],\r\n        files  = argv._,\r\n        paths  = typeof argv.path === \"string\" ? [ argv.path ] : argv.path || [];\r\n\r\n    // alias hyphen args in camel case\r\n    Object.keys(argv).forEach(function(key) {\r\n        var camelKey = key.replace(/-([a-z])/g, function($0, $1) { return $1.toUpperCase(); });\r\n        if (camelKey !== key)\r\n            argv[camelKey] = argv[key];\r\n    });\r\n\r\n    // protobuf.js package directory contains additional, otherwise non-bundled google types\r\n    paths.push(path.relative(process.cwd(), path.join(__dirname, \"..\")) || \".\");\r\n\r\n    if (!files.length) {\r\n        var descs = Object.keys(targets).filter(function(key) { return !targets[key].private; }).map(function(key) {\r\n            return \"                  \" + util.pad(key, 14, true) + targets[key].description;\r\n        });\r\n        if (callback)\r\n            callback(Error(\"usage\")); // eslint-disable-line callback-return\r\n        else\r\n            process.stderr.write([\r\n                \"protobuf.js v\" + pkg.version + \" CLI for JavaScript\",\r\n                \"\",\r\n                chalk.bold.white(\"Translates between file formats and generates static code.\"),\r\n                \"\",\r\n                \"  -t, --target     Specifies the target format. Also accepts a path to require a custom target.\",\r\n                \"\",\r\n                descs.join(\"\\n\"),\r\n                \"\",\r\n                \"  -p, --path       Adds a directory to the include path.\",\r\n                \"\",\r\n                \"  -o, --out        Saves to a file instead of writing to stdout.\",\r\n                \"\",\r\n                \"  --sparse         Exports only those types referenced from a main file (experimental).\",\r\n                \"\",\r\n                chalk.bold.gray(\"   Module targets only:\"),\r\n                \"\",\r\n                \"  -w, --wrap       Specifies the wrapper to use. Also accepts a path to require a custom wrapper.\",\r\n                \"\",\r\n                \"                   default   Default wrapper supporting both CommonJS and AMD\",\r\n                \"                   commonjs  CommonJS wrapper\",\r\n                \"                   amd       AMD wrapper\",\r\n                \"                   es6       ES6 wrapper (implies --es6)\",\r\n                \"\",\r\n                \"  -r, --root       Specifies an alternative protobuf.roots name.\",\r\n                \"\",\r\n                \"  -l, --lint       Linter configuration. Defaults to protobuf.js-compatible rules:\",\r\n                \"\",\r\n                \"                   \" + lintDefault,\r\n                \"\",\r\n                \"  --es6            Enables ES6 syntax (const/let instead of var)\",\r\n                \"\",\r\n                chalk.bold.gray(\"   Proto sources only:\"),\r\n                \"\",\r\n                \"  --keep-case      Keeps field casing instead of converting to camel case.\",\r\n                \"\",\r\n                chalk.bold.gray(\"   Static targets only:\"),\r\n                \"\",\r\n                \"  --no-create      Does not generate create functions used for reflection compatibility.\",\r\n                \"  --no-encode      Does not generate encode functions.\",\r\n                \"  --no-decode      Does not generate decode functions.\",\r\n                \"  --no-verify      Does not generate verify functions.\",\r\n                \"  --no-convert     Does not generate convert functions like from/toObject\",\r\n                \"  --no-delimited   Does not generate delimited encode/decode functions.\",\r\n                \"  --no-beautify    Does not beautify generated code.\",\r\n                \"  --no-comments    Does not output any JSDoc comments.\",\r\n                \"\",\r\n                \"  --force-long     Enfores the use of 'Long' for s-/u-/int64 and s-/fixed64 fields.\",\r\n                \"  --force-message  Enfores the use of message instances instead of plain objects.\",\r\n                \"\",\r\n                \"usage: \" + chalk.bold.green(\"pbjs\") + \" [options] file1.proto file2.json ...\" + chalk.gray(\"  (or)  \") + \"other | \" + chalk.bold.green(\"pbjs\") + \" [options] -\",\r\n                \"\"\r\n            ].join(\"\\n\"));\r\n        return 1;\r\n    }\r\n\r\n    if (typeof argv[\"strict-long\"] === \"boolean\")\r\n        argv[\"force-long\"] = argv[\"strict-long\"];\r\n\r\n    // Resolve glob expressions\r\n    for (var i = 0; i < files.length;) {\r\n        if (glob.hasMagic(files[i])) {\r\n            var matches = glob.sync(files[i]);\r\n            Array.prototype.splice.apply(files, [i, 1].concat(matches));\r\n            i += matches.length;\r\n        } else\r\n            ++i;\r\n    }\r\n\r\n    // Require custom target\r\n    if (!target)\r\n        target = require(path.resolve(process.cwd(), argv.target));\r\n\r\n    var root = new protobuf.Root();\r\n\r\n    var mainFiles = [];\r\n\r\n    // Search include paths when resolving imports\r\n    root.resolvePath = function pbjsResolvePath(origin, target) {\r\n        var normOrigin = protobuf.util.path.normalize(origin),\r\n            normTarget = protobuf.util.path.normalize(target);\r\n        if (!normOrigin)\r\n            mainFiles.push(normTarget);\r\n\r\n        var resolved = protobuf.util.path.resolve(normOrigin, normTarget, true);\r\n        var idx = resolved.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = resolved.substring(idx);\r\n            if (altname in protobuf.common)\r\n                resolved = altname;\r\n        }\r\n\r\n        if (fs.existsSync(resolved))\r\n            return resolved;\r\n\r\n        for (var i = 0; i < paths.length; ++i) {\r\n            var iresolved = protobuf.util.path.resolve(paths[i] + \"/\", target);\r\n            if (fs.existsSync(iresolved))\r\n                return iresolved;\r\n        }\r\n\r\n        return resolved;\r\n    };\r\n\r\n    // Use es6 syntax if not explicitly specified on the command line and the es6 wrapper is used\r\n    if (argv.wrap === \"es6\" || argv.es6) {\r\n        argv.wrap = \"es6\";\r\n        argv.es6 = true;\r\n    }\r\n\r\n    var parseOptions = {\r\n        \"keepCase\": argv[\"keep-case\"] || false\r\n    };\r\n\r\n    // Read from stdin\r\n    if (files.length === 1 && files[0] === \"-\") {\r\n        var data = [];\r\n        process.stdin.on(\"data\", function(chunk) {\r\n            data.push(chunk);\r\n        });\r\n        process.stdin.on(\"end\", function() {\r\n            var source = Buffer.concat(data).toString(\"utf8\");\r\n            try {\r\n                if (source.charAt(0) !== \"{\") {\r\n                    protobuf.parse.filename = \"-\";\r\n                    protobuf.parse(source, root, parseOptions);\r\n                } else {\r\n                    var json = JSON.parse(source);\r\n                    root.setOptions(json.options).addJSON(json);\r\n                }\r\n                callTarget();\r\n            } catch (err) {\r\n                if (callback) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                throw err;\r\n            }\r\n        });\r\n\r\n    // Load from disk\r\n    } else {\r\n        try {\r\n            root.loadSync(files, parseOptions).resolveAll(); // sync is deterministic while async is not\r\n            if (argv.sparse)\r\n                sparsify(root);\r\n            callTarget();\r\n        } catch (err) {\r\n            if (callback) {\r\n                callback(err);\r\n                return undefined;\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    function markReferenced(tobj) {\r\n        tobj.referenced = true;\r\n        // also mark a type's fields and oneofs\r\n        if (tobj.fieldsArray)\r\n            tobj.fieldsArray.forEach(function(fobj) {\r\n                fobj.referenced = true;\r\n            });\r\n        if (tobj.oneofsArray)\r\n            tobj.oneofsArray.forEach(function(oobj) {\r\n                oobj.referenced = true;\r\n            });\r\n        // also mark an extension field's extended type, but not its (other) fields\r\n        if (tobj.extensionField)\r\n            tobj.extensionField.parent.referenced = true;\r\n    }\r\n\r\n    function sparsify(root) {\r\n\r\n        // 1. mark directly or indirectly referenced objects\r\n        util.traverse(root, function(obj) {\r\n            if (!obj.filename)\r\n                return;\r\n            if (mainFiles.indexOf(obj.filename) > -1)\r\n                util.traverseResolved(obj, markReferenced);\r\n        });\r\n\r\n        // 2. empty unreferenced objects\r\n        util.traverse(root, function(obj) {\r\n            var parent = obj.parent;\r\n            if (!parent || obj.referenced) // root or referenced\r\n                return;\r\n            // remove unreferenced namespaces\r\n            if (obj instanceof protobuf.Namespace) {\r\n                var hasReferenced = false;\r\n                util.traverse(obj, function(iobj) {\r\n                    if (iobj.referenced)\r\n                        hasReferenced = true;\r\n                });\r\n                if (hasReferenced) { // replace with plain namespace if a namespace subclass\r\n                    if (obj instanceof protobuf.Type || obj instanceof protobuf.Service) {\r\n                        var robj = new protobuf.Namespace(obj.name, obj.options);\r\n                        robj.nested = obj.nested;\r\n                        parent.add(robj);\r\n                    }\r\n                } else // remove completely if nothing inside is referenced\r\n                    parent.remove(obj);\r\n\r\n            // remove everything else unreferenced\r\n            } else if (!(obj instanceof protobuf.Namespace))\r\n                parent.remove(obj);\r\n        });\r\n\r\n        // 3. validate that everything is fine\r\n        root.resolveAll();\r\n    }\r\n\r\n    function callTarget() {\r\n        target(root, argv, function targetCallback(err, output) {\r\n            if (err) {\r\n                if (callback)\r\n                    return callback(err);\r\n                throw err;\r\n            }\r\n            try {\r\n                if (argv.out)\r\n                    fs.writeFileSync(argv.out, output, { encoding: \"utf8\" });\r\n                else if (!callback)\r\n                    process.stdout.write(output, \"utf8\");\r\n                return callback\r\n                    ? callback(null, output)\r\n                    : undefined;\r\n            } catch (err) {\r\n                if (callback)\r\n                    return callback(err);\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/util.js":"\"use strict\";\r\nvar fs            = require(\"fs\"),\r\n    path          = require(\"path\"),\r\n    child_process = require(\"child_process\");\r\n\r\nvar semver;\r\n\r\ntry {\r\n    // installed as a peer dependency\r\n    require.resolve(\"protobufjs\");\r\n    exports.pathToProtobufJs = \"protobufjs\";\r\n} catch (e) {\r\n    // local development, i.e. forked from github\r\n    exports.pathToProtobufJs = \"..\";\r\n}\r\n\r\nvar protobuf = require(exports.pathToProtobufJs);\r\n\r\nfunction basenameCompare(a, b) {\r\n    var aa = String(a).replace(/\\.\\w+$/, \"\").split(/(-?\\d*\\.?\\d+)/g),\r\n        bb = String(b).replace(/\\.\\w+$/, \"\").split(/(-?\\d*\\.?\\d+)/g);\r\n    for (var i = 0, k = Math.min(aa.length, bb.length); i < k; i++) {\r\n        var x = parseFloat(aa[i]) || aa[i].toLowerCase(),\r\n            y = parseFloat(bb[i]) || bb[i].toLowerCase();\r\n        if (x < y)\r\n            return -1;\r\n        if (x > y)\r\n            return 1;\r\n    }\r\n    return a.length < b.length ? -1 : 0;\r\n}\r\n\r\nexports.requireAll = function requireAll(dirname) {\r\n    dirname   = path.join(__dirname, dirname);\r\n    var files = fs.readdirSync(dirname).sort(basenameCompare),\r\n        all = {};\r\n    files.forEach(function(file) {\r\n        var basename = path.basename(file, \".js\"),\r\n            extname  = path.extname(file);\r\n        if (extname === \".js\")\r\n            all[basename] = require(path.join(dirname, file));\r\n    });\r\n    return all;\r\n};\r\n\r\nexports.traverse = function traverse(current, fn) {\r\n    fn(current);\r\n    if (current.fieldsArray)\r\n        current.fieldsArray.forEach(function(field) {\r\n            traverse(field, fn);\r\n        });\r\n    if (current.oneofsArray)\r\n        current.oneofsArray.forEach(function(oneof) {\r\n            traverse(oneof, fn);\r\n        });\r\n    if (current.methodsArray)\r\n        current.methodsArray.forEach(function(method) {\r\n            traverse(method, fn);\r\n        });\r\n    if (current.nestedArray)\r\n        current.nestedArray.forEach(function(nested) {\r\n            traverse(nested, fn);\r\n        });\r\n};\r\n\r\nexports.traverseResolved = function traverseResolved(current, fn) {\r\n    fn(current);\r\n    if (current.resolvedType)\r\n        traverseResolved(current.resolvedType, fn);\r\n    if (current.resolvedKeyType)\r\n        traverseResolved(current.resolvedKeyType, fn);\r\n    if (current.resolvedRequestType)\r\n        traverseResolved(current.resolvedRequestType, fn);\r\n    if (current.resolvedResponseType)\r\n        traverseResolved(current.resolvedResponseType, fn);\r\n};\r\n\r\nexports.inspect = function inspect(object, indent) {\r\n    if (!object)\r\n        return \"\";\r\n    var chalk = require(\"chalk\");\r\n    var sb = [];\r\n    if (!indent)\r\n        indent = \"\";\r\n    var ind = indent ? indent.substring(0, indent.length - 2) + \"└ \" : \"\";\r\n    sb.push(\r\n        ind + chalk.bold(object.toString()) + (object.visible ? \" (visible)\" : \"\"),\r\n        indent + chalk.gray(\"parent: \") + object.parent\r\n    );\r\n    if (object instanceof protobuf.Field) {\r\n        if (object.extend !== undefined)\r\n            sb.push(indent + chalk.gray(\"extend: \") + object.extend);\r\n        if (object.partOf)\r\n            sb.push(indent + chalk.gray(\"oneof : \") + object.oneof);\r\n    }\r\n    sb.push(\"\");\r\n    if (object.fieldsArray)\r\n        object.fieldsArray.forEach(function(field) {\r\n            sb.push(inspect(field, indent + \"  \"));\r\n        });\r\n    if (object.oneofsArray)\r\n        object.oneofsArray.forEach(function(oneof) {\r\n            sb.push(inspect(oneof, indent + \"  \"));\r\n        });\r\n    if (object.methodsArray)\r\n        object.methodsArray.forEach(function(service) {\r\n            sb.push(inspect(service, indent + \"  \"));\r\n        });\r\n    if (object.nestedArray)\r\n        object.nestedArray.forEach(function(nested) {\r\n            sb.push(inspect(nested, indent + \"  \"));\r\n        });\r\n    return sb.join(\"\\n\");\r\n};\r\n\r\nfunction modExists(name, version) {\r\n    for (var i = 0; i < module.paths.length; ++i) {\r\n        try {\r\n            var pkg = JSON.parse(fs.readFileSync(path.join(module.paths[i], name, \"package.json\")));\r\n            return semver\r\n                ? semver.satisfies(pkg.version, version)\r\n                : parseInt(pkg.version, 10) === parseInt(version.replace(/^[\\^~]/, \"\"), 10); // used for semver only\r\n        } catch (e) {/**/}\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction modInstall(install) {\r\n    child_process.execSync(\"npm --silent install \" + (typeof install === \"string\" ? install : install.join(\" \")), {\r\n        cwd: __dirname,\r\n        stdio: \"ignore\"\r\n    });\r\n}\r\n\r\nexports.setup = function() {\r\n    var pkg = require(path.join(__dirname, \"..\", \"package.json\"));\r\n    var version = pkg.dependencies[\"semver\"] || pkg.devDependencies[\"semver\"];\r\n    if (!modExists(\"semver\", version)) {\r\n        process.stderr.write(\"installing semver@\" + version + \"\\n\");\r\n        modInstall(\"semver@\" + version);\r\n    }\r\n    semver = require(\"semver\"); // used from now on for version comparison\r\n    var install = [];\r\n    pkg.cliDependencies.forEach(function(name) {\r\n        if (name === \"semver\")\r\n            return;\r\n        version = pkg.dependencies[name] || pkg.devDependencies[name];\r\n        if (!modExists(name, version)) {\r\n            process.stderr.write(\"installing \" + name + \"@\" + version + \"\\n\");\r\n            install.push(name + \"@\" + version);\r\n        }\r\n    });\r\n    require(\"../scripts/postinstall\"); // emit postinstall warning, if any\r\n    if (!install.length)\r\n        return;\r\n    modInstall(install);\r\n};\r\n\r\nexports.wrap = function(OUTPUT, options) {\r\n    var name = options.wrap || \"default\";\r\n    var wrap;\r\n    try {\r\n        // try built-in wrappers first\r\n        wrap = fs.readFileSync(path.join(__dirname, \"wrappers\", name + \".js\")).toString(\"utf8\");\r\n    } catch (e) {\r\n        // otherwise fetch the custom one\r\n        wrap = fs.readFileSync(path.resolve(process.cwd(), name)).toString(\"utf8\");\r\n    }\r\n    wrap = wrap.replace(/\\$DEPENDENCY/g, JSON.stringify(options.dependency || \"protobufjs\"));\r\n    wrap = wrap.replace(/( *)\\$OUTPUT;/, function($0, $1) {\r\n        return $1.length ? OUTPUT.replace(/^/mg, $1) : OUTPUT;\r\n    });\r\n    if (options.lint !== \"\")\r\n        wrap = \"/*\" + options.lint + \"*/\\n\" + wrap;\r\n    return wrap.replace(/\\r?\\n/g, \"\\n\");\r\n};\r\n\r\nexports.pad = function(str, len, l) {\r\n    while (str.length < len)\r\n        str = l ? str + \" \" : \" \" + str;\r\n    return str;\r\n};\r\n\r\nexports.reserved = function reserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n// generate dot-notation property accessors where possible. this saves a few chars (i.e. m.hello\r\n// instead of m[\"hello\"]) but has no measurable performance impact (on V8). not present within the\r\n// library itself because the reserved words check requires a rather longish regex.\r\nexports.safeProp = protobuf.util.safeProp = (function(safeProp) {\r\n    return function safeProp_dn(name) {\r\n        return !/^[$\\w]+$/.test(name) || exports.reserved(name)\r\n            ? safeProp(name)\r\n            : \".\" + name;\r\n    };\r\n})(protobuf.util.safeProp);\r\n\r\nexports.jsonSafeProp = function(json) {\r\n    return json.replace(/^( +)\"(\\w+)\":/mg, function($0, $1, $2) {\r\n        return exports.safeProp($2).charAt(0) === \".\"\r\n            ? $1 + $2 + \":\"\r\n            : $0;\r\n    });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/pbts.js":"\"use strict\";\r\nvar child_process = require(\"child_process\"),\r\n    path     = require(\"path\"),\r\n    fs       = require(\"fs\"),\r\n    pkg      = require(\"./package.json\"),\r\n    util     = require(\"./util\");\r\n\r\nutil.setup();\r\n\r\nvar minimist = require(\"minimist\"),\r\n    chalk    = require(\"chalk\"),\r\n    glob     = require(\"glob\"),\r\n    tmp      = require(\"tmp\");\r\n\r\n/**\r\n * Runs pbts programmatically.\r\n * @param {string[]} args Command line arguments\r\n * @param {function(?Error, string=)} [callback] Optional completion callback\r\n * @returns {number|undefined} Exit code, if known\r\n */\r\nexports.main = function(args, callback) {\r\n    var argv = minimist(args, {\r\n        alias: {\r\n            name: \"n\",\r\n            out : \"o\",\r\n            main: \"m\",\r\n            global: \"g\"\r\n        },\r\n        string: [ \"name\", \"out\", \"global\" ],\r\n        boolean: [ \"comments\", \"main\" ],\r\n        default: {\r\n            comments: true,\r\n            main: false\r\n        }\r\n    });\r\n\r\n    var files  = argv._;\r\n\r\n    if (!files.length) {\r\n        if (callback)\r\n            callback(Error(\"usage\")); // eslint-disable-line callback-return\r\n        else\r\n            process.stderr.write([\r\n                \"protobuf.js v\" + pkg.version + \" CLI for TypeScript\",\r\n                \"\",\r\n                chalk.bold.white(\"Generates TypeScript definitions from annotated JavaScript files.\"),\r\n                \"\",\r\n                \"  -o, --out       Saves to a file instead of writing to stdout.\",\r\n                \"\",\r\n                \"  -g, --global    Name of the global object in browser environments, if any.\",\r\n                \"\",\r\n                \"  --no-comments   Does not output any JSDoc comments.\",\r\n                \"\",\r\n                chalk.bold.gray(\"  Internal flags:\"),\r\n                \"\",\r\n                \"  -n, --name      Wraps everything in a module of the specified name.\",\r\n                \"\",\r\n                \"  -m, --main      Whether building the main library without any imports.\",\r\n                \"\",\r\n                \"usage: \" + chalk.bold.green(\"pbts\") + \" [options] file1.js file2.js ...\" + chalk.bold.gray(\"  (or)  \") + \"other | \" + chalk.bold.green(\"pbts\") + \" [options] -\",\r\n                \"\"\r\n            ].join(\"\\n\"));\r\n        return 1;\r\n    }\r\n\r\n    // Resolve glob expressions\r\n    for (var i = 0; i < files.length;) {\r\n        if (glob.hasMagic(files[i])) {\r\n            var matches = glob.sync(files[i]);\r\n            Array.prototype.splice.apply(files, [i, 1].concat(matches));\r\n            i += matches.length;\r\n        } else\r\n            ++i;\r\n    }\r\n\r\n    var cleanup = [];\r\n\r\n    // Read from stdin (to a temporary file)\r\n    if (files.length === 1 && files[0] === \"-\") {\r\n        var data = [];\r\n        process.stdin.on(\"data\", function(chunk) {\r\n            data.push(chunk);\r\n        });\r\n        process.stdin.on(\"end\", function() {\r\n            files[0] = tmp.tmpNameSync() + \".js\";\r\n            fs.writeFileSync(files[0], Buffer.concat(data));\r\n            cleanup.push(files[0]);\r\n            callJsdoc();\r\n        });\r\n\r\n    // Load from disk\r\n    } else {\r\n        callJsdoc();\r\n    }\r\n\r\n    function callJsdoc() {\r\n\r\n        // There is no proper API for jsdoc, so this executes the CLI and pipes the output\r\n        var basedir = path.join(__dirname, \".\");\r\n        var moduleName = argv.name || \"null\";\r\n        var cmd = \"node \\\"\" + require.resolve(\"jsdoc/jsdoc.js\") + \"\\\" -c \\\"\" + path.join(basedir, \"lib\", \"tsd-jsdoc.json\") + \"\\\" -q \\\"module=\" + encodeURIComponent(moduleName) + \"&comments=\" + Boolean(argv.comments) + \"\\\" \" + files.map(function(file) { return \"\\\"\" + file + \"\\\"\"; }).join(\" \");\r\n        var child = child_process.exec(cmd, {\r\n            cwd: process.cwd(),\r\n            argv0: \"node\",\r\n            stdio: \"pipe\",\r\n            maxBuffer: 1 << 24 // 16mb\r\n        });\r\n        var out = [];\r\n        child.stdout.on(\"data\", function(data) {\r\n            out.push(data);\r\n        });\r\n        child.stderr.pipe(process.stderr);\r\n        child.on(\"close\", function(code) {\r\n            // clean up temporary files, no matter what\r\n            try { cleanup.forEach(fs.unlinkSync); } catch(e) {/**/} cleanup = [];\r\n\r\n            if (code) {\r\n                out = out.join(\"\").replace(/\\s*JSDoc \\d+\\.\\d+\\.\\d+ [^$]+/, \"\");\r\n                process.stderr.write(out);\r\n                var err = Error(\"code \" + code);\r\n                if (callback)\r\n                    return callback(err);\r\n                throw err;\r\n            }\r\n\r\n            var output = [];\r\n            if (argv.global)\r\n                output.push(\r\n                    \"export as namespace \" + argv.global + \";\",\r\n                    \"\"\r\n                );\r\n            if (!argv.main)\r\n                output.push(\r\n                    \"import * as $protobuf from \\\"protobufjs\\\";\",\r\n                    \"\"\r\n                );\r\n            output = output.join(\"\\n\") + \"\\n\" + out.join(\"\");\r\n\r\n            try {\r\n                if (argv.out)\r\n                    fs.writeFileSync(argv.out, output, { encoding: \"utf8\" });\r\n                else if (!callback)\r\n                    process.stdout.write(output, \"utf8\");\r\n                return callback\r\n                    ? callback(null, output)\r\n                    : undefined;\r\n            } catch (err) {\r\n                if (callback)\r\n                    return callback(err);\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/polyfill.js":"// This file exists for testing purposes but can also be used as a reference for polyfilling non-ES5 environments.\r\n// ref: https://github.com/inexorabletash/polyfill/blob/master/es5.js (public domain)\r\n\r\n// ES5 15.2.3.5 Object.create ( O [, Properties] )\r\nif (typeof Object.create !== \"function\") {\r\n  Object.create = function (prototype, properties) {\r\n    if (typeof prototype !== \"object\") { throw TypeError(); }\r\n    function Ctor() {}\r\n    Ctor.prototype = prototype;\r\n    var o = new Ctor();\r\n    if (prototype) { o.constructor = Ctor; }\r\n    if (properties !== undefined) {\r\n      if (properties !== Object(properties)) { throw TypeError(); }\r\n      Object.defineProperties(o, properties);\r\n    }\r\n    return o;\r\n  };\r\n}\r\n\r\n// ES 15.2.3.6 Object.defineProperty ( O, P, Attributes )\r\n// Partial support for most common case - getters, setters, and values\r\n(function() {\r\n  if (!Object.defineProperty ||\r\n      !(function () { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } } ())) {\r\n    var orig = Object.defineProperty;\r\n    Object.defineProperty = function (o, prop, desc) {\r\n      // In IE8 try built-in implementation for defining properties on DOM prototypes.\r\n      if (orig) { try { return orig(o, prop, desc); } catch (e) {} }\r\n\r\n      if (o !== Object(o)) { throw TypeError(\"Object.defineProperty called on non-object\"); }\r\n      if (Object.prototype.__defineGetter__ && ('get' in desc)) {\r\n        Object.prototype.__defineGetter__.call(o, prop, desc.get);\r\n      }\r\n      if (Object.prototype.__defineSetter__ && ('set' in desc)) {\r\n        Object.prototype.__defineSetter__.call(o, prop, desc.set);\r\n      }\r\n      if ('value' in desc) {\r\n        o[prop] = desc.value;\r\n      }\r\n      return o;\r\n    };\r\n  }\r\n}());\r\n\r\n// ES 15.2.3.7 Object.defineProperties ( O, Properties )\r\nif (typeof Object.defineProperties !== \"function\") {\r\n  Object.defineProperties = function (o, properties) {\r\n    if (o !== Object(o)) { throw TypeError(\"Object.defineProperties called on non-object\"); }\r\n    var name;\r\n    for (name in properties) {\r\n      if (Object.prototype.hasOwnProperty.call(properties, name)) {\r\n        Object.defineProperty(o, name, properties[name]);\r\n      }\r\n    }\r\n    return o;\r\n  };\r\n}\r\n\r\n// ES5 15.2.3.14 Object.keys ( O )\r\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\r\nif (!Object.keys) {\r\n  Object.keys = function (o) {\r\n    if (o !== Object(o)) { throw TypeError('Object.keys called on non-object'); }\r\n    var ret = [], p;\r\n    for (p in o) {\r\n      if (Object.prototype.hasOwnProperty.call(o, p)) {\r\n        ret.push(p);\r\n      }\r\n    }\r\n    return ret;\r\n  };\r\n}\r\n\r\n// ES5 15.4.3.2 Array.isArray ( arg )\r\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\r\nif (!Array.isArray)\r\n  Array.isArray = function (o) { return Boolean(o && Object.prototype.toString.call(Object(o)) === '[object Array]'); };\r\n\r\n// ES5 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\r\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\r\nif (!Array.prototype.indexOf) {\r\n  Array.prototype.indexOf = function (searchElement /*, fromIndex */) {\r\n    if (this === void 0 || this === null) { throw TypeError(); }\r\n\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (len === 0) { return -1; }\r\n\r\n    var n = 0;\r\n    if (arguments.length > 0) {\r\n      n = Number(arguments[1]);\r\n      if (isNaN(n)) {\r\n        n = 0;\r\n      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\r\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n      }\r\n    }\r\n\r\n    if (n >= len) { return -1; }\r\n\r\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n\r\n    for (; k < len; k++) {\r\n      if (k in t && t[k] === searchElement) {\r\n        return k;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n}\r\n\r\n// ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\r\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\r\nif (!Array.prototype.forEach) {\r\n  Array.prototype.forEach = function (fun /*, thisp */) {\r\n    if (this === void 0 || this === null) { throw TypeError(); }\r\n\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (typeof fun !== \"function\") { throw TypeError(); }\r\n\r\n    var thisp = arguments[1], i;\r\n    for (i = 0; i < len; i++) {\r\n      if (i in t) {\r\n        fun.call(thisp, t[i], i, t);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n\r\n// ES5 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )\r\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map\r\nif (!Array.prototype.map) {\r\n  Array.prototype.map = function (fun /*, thisp */) {\r\n    if (this === void 0 || this === null) { throw TypeError(); }\r\n\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (typeof fun !== \"function\") { throw TypeError(); }\r\n\r\n    var res = []; res.length = len;\r\n    var thisp = arguments[1], i;\r\n    for (i = 0; i < len; i++) {\r\n      if (i in t) {\r\n        res[i] = fun.call(thisp, t[i], i, t);\r\n      }\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\n// ES5 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )\r\n// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter\r\nif (!Array.prototype.filter) {\r\n  Array.prototype.filter = function (fun /*, thisp */) {\r\n    if (this === void 0 || this === null) { throw TypeError(); }\r\n\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (typeof fun !== \"function\") { throw TypeError(); }\r\n\r\n    var res = [];\r\n    var thisp = arguments[1], i;\r\n    for (i = 0; i < len; i++) {\r\n      if (i in t) {\r\n        var val = t[i]; // in case fun mutates this\r\n        if (fun.call(thisp, val, i, t)) {\r\n          res.push(val);\r\n        }\r\n      }\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/prelude.js":"(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/tape-adapter.js":"var tape = require(\"tape\");\r\n\r\nvar Test = tape.Test;\r\n\r\n// some ancient environments have invalid own properties on buffers so that deepEqual doesn't work.\r\n// the following uses a monkey-patched deepEqual implementation for all kinds of number arrays.\r\n\r\nvar deepEqual = require(\"./deep-equal\");\r\n\r\nTest.prototype.deepEqual\r\n= Test.prototype.deepEquals\r\n= Test.prototype.isEquivalent\r\n= Test.prototype.same\r\n= function (a, b, msg, extra) {\r\n    this._assert(deepEqual(a, b, { strict: true }), {\r\n        message : msg || \"should be equivalent\",\r\n        operator : \"deepEqual\",\r\n        actual : a,\r\n        expected : b,\r\n        extra : extra\r\n    });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/bundle.js":"\"use strict\";\r\nmodule.exports = bundle;\r\n\r\nvar fs         = require(\"fs\"),\r\n    path       = require(\"path\");\r\n\r\nvar browserify = require(\"browserify\");\r\n\r\nvar header     = require(\"gulp-header\");\r\nvar gulpif     = require(\"gulp-if\");\r\nvar sourcemaps = require(\"gulp-sourcemaps\");\r\nvar uglify     = require(\"gulp-uglify\");\r\nvar gutil      = require(\"gulp-util\");\r\n\r\nvar buffer     = require(\"vinyl-buffer\");\r\nvar vinylfs    = require(\"vinyl-fs\");\r\nvar source     = require(\"vinyl-source-stream\");\r\n\r\nvar zopfli     = require(\"node-zopfli\");\r\n\r\nvar pkg = require(path.join(__dirname, \"..\", \"package.json\"));\r\n\r\n/*eslint-disable no-template-curly-in-string*/\r\nvar license = [\r\n    \"/*!\",\r\n    \" * protobuf.js v${version} (c) 2016, Daniel Wirtz\",\r\n    \" * Compiled ${date}\",\r\n    \" * Licensed under the BSD-3-Clause License\",\r\n    \" * see: https://github.com/dcodeIO/protobuf.js for details\",\r\n    \" */\"\r\n].join(\"\\n\") + \"\\n\";\r\n/*eslint-enable no-template-curly-in-string*/\r\n\r\nvar prelude = fs.readFileSync(require.resolve(\"../lib/prelude.js\")).toString(\"utf8\");\r\n\r\n/**\r\n * Bundles the library.\r\n * @param {Object} options Bundler options\r\n * @param {string} options.entry Entry file\r\n * @param {string} options.target Target directory\r\n * @param {boolean} [options.compress=false] Whether to minify or not\r\n * @param {string[]} [options.exclude] Excluded source files\r\n * @returns {undefined}\r\n */\r\nfunction bundle(options) {\r\n    if (!options || !options.entry || !options.target)\r\n        throw TypeError(\"missing options\");\r\n    var bundler = browserify({\r\n        entries: options.entry,\r\n        insertGlobalVars: false,\r\n        detectGlobals: false,\r\n        debug: true,\r\n        prelude: prelude,\r\n        preludePath: \"./lib/prelude.js\"\r\n    })\r\n    .external(\"long\");\r\n    if (options.exclude)\r\n        options.exclude.forEach(bundler.exclude, bundler);\r\n    return bundler\r\n    .plugin(require(\"browserify-wrap\"), {\r\n        // + global object for convenience\r\n        // + undefined var and global strict-mode for uglify\r\n        prefix: \"(function(global,undefined){\\\"use strict\\\";\",\r\n        suffix: \"})(typeof window===\\\"object\\\"&&window||typeof self===\\\"object\\\"&&self||this);\"\r\n    })\r\n    .plugin(require(\"bundle-collapser/plugin\"))\r\n    .bundle()\r\n    .pipe(source(options.compress ? \"protobuf.min.js\" : \"protobuf.js\"))\r\n    .pipe(buffer())\r\n    .pipe(sourcemaps.init({ loadMaps: true }))\r\n            .pipe(\r\n                gulpif(options.compress, uglify({\r\n                    mangleProperties: {\r\n                        regex: /^_/\r\n                    },\r\n                    mangle: {\r\n                        eval: true,\r\n                        toplevel: false\r\n                    },\r\n                    compress: {\r\n                        unused: true,\r\n                        keep_fargs: false,\r\n                        unsafe: true\r\n                    }\r\n                }))\r\n            )\r\n            .pipe(header(license, {\r\n                date: (new Date()).toUTCString().replace(\"GMT\", \"UTC\"),\r\n                version: pkg.version\r\n            }))\r\n    .pipe(sourcemaps.write(\".\", { sourceRoot: \"\" }))\r\n    .pipe(vinylfs.dest(options.target))\r\n    .on(\"log\", gutil.log)\r\n    .on(\"error\", gutil.log);\r\n}\r\n\r\n/**\r\n * Compresses a file using zopfli gzip.\r\n * @param {string} sourceFile Source file\r\n * @param {string} destinationFile Destination file\r\n * @param {function(?Error)} callback Node-style callback\r\n * @returns {undefined}\r\n */\r\nbundle.compress = function compress(sourceFile, destinationFile, callback) {\r\n    var src = fs.createReadStream(sourceFile);\r\n    var dst = fs.createWriteStream(destinationFile);\r\n    src.on(\"error\", callback);\r\n    dst.on(\"error\", callback);\r\n    dst.on(\"close\", function() {\r\n        callback(null);\r\n    });\r\n    src.pipe(zopfli.createGzip()).pipe(dst);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/changelog.js":"\"use strict\";\r\n\r\nvar path = require(\"path\"),\r\n    fs   = require(\"fs\");\r\n\r\nvar gitSemverTags = require(\"git-semver-tags\"),\r\n    gitRawCommits = require(\"git-raw-commits\"),\r\n    minimist      = require(\"minimist\");\r\n\r\nvar basedir = path.join(__dirname, \"..\");\r\nvar pkg = require(basedir + \"/package.json\");\r\n\r\nvar argv = minimist(process.argv, {\r\n    alias: {\r\n        tag    : \"t\",\r\n        write  : \"w\"\r\n    },\r\n    string: [ \"tag\" ],\r\n    boolean: [ \"write\" ],\r\n    default: {\r\n        tag: null,\r\n        write: false\r\n    }\r\n});\r\n\r\n// categories to be used in the future and regexes for lazy / older subjects\r\nvar validCategories = {\r\n    \"Breaking\": null,\r\n    \"Fixed\": /fix|properly|prevent|correctly/i,\r\n    \"New\": /added|initial/i,\r\n    \"CLI\": /pbjs|pbts|CLI/,\r\n    \"Docs\": /README/i,\r\n    \"Other\": null\r\n};\r\nvar breakingFallback = /removed|stripped|dropped/i;\r\n\r\nvar repo = \"https://github.com/dcodeIO/protobuf.js\";\r\n\r\ngitSemverTags(function(err, tags) {\r\n    if (err)\r\n        throw err;\r\n\r\n    var categories = {};\r\n    Object.keys(validCategories).forEach(function(category) {\r\n        categories[category] = [];\r\n    });\r\n    var output = [];\r\n\r\n    var from = tags[0];\r\n    var to = \"HEAD\";\r\n    var tag;\r\n    if (argv.tag) {\r\n        var idx = tags.indexOf(argv.tag);\r\n        if (idx < 0)\r\n            throw Error(\"no such tag: \" + argv.tag);\r\n        from = tags[idx + 1];\r\n        tag = to = tags[idx];\r\n    } else\r\n        tag = pkg.version;\r\n\r\n    var commits = gitRawCommits({\r\n        from: from,\r\n        to: to,\r\n        merges: false,\r\n        format: \"%B%n#%H\"\r\n    });\r\n\r\n    commits.on(\"error\", function(err) {\r\n        throw err;\r\n    });\r\n\r\n    commits.on(\"data\", function(chunk) {\r\n        var message = chunk.toString(\"utf8\").trim();\r\n        var match = /#([0-9a-f]{40})$/.exec(message);\r\n        var hash;\r\n        if (match) {\r\n            message = message.substring(0, message.length - match[1].length).trim();\r\n            hash = match[1];\r\n        }\r\n        message.split(\";\").forEach(function(message) {\r\n            if (/^(Merge pull request |Post-merge)/.test(message))\r\n                return;\r\n            var match = /^(\\w+):/i.exec(message = message.trim());\r\n            var category;\r\n            if (match && match[1] in validCategories) {\r\n                category = match[1];\r\n                message = message.substring(match[1].length + 1).trim();\r\n            } else {\r\n                var keys = Object.keys(validCategories);\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    var re = validCategories[keys[i]];\r\n                    if (re && re.test(message)) {\r\n                        category = keys[i];\r\n                        break;\r\n                    }\r\n                }\r\n                message = message.replace(/^(\\w+):/i, \"\").trim();\r\n            }\r\n            if (!category) {\r\n                if (breakingFallback.test(message))\r\n                    category = \"Breaking\";\r\n                else\r\n                    category = \"Other\";\r\n            }\r\n            var nl = message.indexOf(\"\\n\");\r\n            if (nl > -1)\r\n                message = message.substring(0, nl).trim();\r\n            if (!hash || message.length < 12)\r\n                return;\r\n            message = message.replace(/\\[ci skip\\]/, \"\").trim();\r\n            categories[category].push({\r\n                text: message,\r\n                hash: hash\r\n            });\r\n        });\r\n    });\r\n\r\n    commits.on(\"end\", function() {\r\n        output.push(\"# [\" + tag + \"](\" + repo + \"/releases/tag/\" + tag + \")\\n\");\r\n        Object.keys(categories).forEach(function(category) {\r\n            var messages = categories[category];\r\n            if (!messages.length)\r\n                return;\r\n            output.push(\"\\n## \" + category + \"\\n\");\r\n            messages.forEach(function(message) {\r\n                var text = message.text.replace(/#(\\d+)/g, \"[#$1](\" + repo + \"/issues/$1)\");\r\n                output.push(\"[:hash:](\" + repo + \"/commit/\" + message.hash + \") \" + text + \"<br />\\n\");\r\n            });\r\n        });\r\n        var current;\r\n        try {\r\n            current = fs.readFileSync(basedir + \"/CHANGELOG.md\").toString(\"utf8\");\r\n        } catch (e) {\r\n            current = \"\";\r\n        }\r\n        var re = new RegExp(\"^# \\\\[\" + tag + \"\\\\]\");\r\n        if (re.test(current)) { // regenerated, replace\r\n            var pos = current.indexOf(\"# [\", 1);\r\n            if (pos > -1)\r\n                current = current.substring(pos).trim();\r\n            else\r\n                current = \"\";\r\n        }\r\n        var contents = output.join(\"\") + \"\\n\" + current;\r\n        if (argv.write)\r\n            fs.writeFileSync(basedir + \"/CHANGELOG.md\", contents, \"utf8\");\r\n        else\r\n            process.stdout.write(contents);\r\n    });\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/gencommons.js":"\"use strict\";\r\nvar pbjs = require(\"../cli/pbjs\");\r\n\r\n[\r\n    \"google/protobuf/api.proto\",\r\n    \"google/protobuf/descriptor.proto\",\r\n    \"google/protobuf/field_mask.proto\",\r\n    \"google/protobuf/source_context.proto\",\r\n    \"google/protobuf/type.proto\",\r\n\r\n    \"google/api/annotations.proto\",\r\n    \"google/api/http.proto\"\r\n]\r\n.forEach(function(file) {\r\n    var out = file.replace(/\\.proto$/, \".json\");\r\n    pbjs.main([\r\n        \"--target\", \"json\",\r\n        \"--sparse\",\r\n        \"--out\", out,\r\n        file\r\n    ], function(err) {\r\n        if (err)\r\n            throw err;\r\n        process.stdout.write(\"pbjs: \" + file + \" -> \" + out + \"\\n\");\r\n    });\r\n});","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/gentests.js":"\"use strict\";\r\nvar fs   = require(\"fs\"),\r\n    path = require(\"path\"),\r\n    pbjs = require(\"../cli/pbjs\"),\r\n    pbts = require(\"../cli/pbts\");\r\n\r\n[\r\n    { file: \"tests/data/comments.proto\", flags: [] },\r\n    { file: \"tests/data/convert.proto\", flags: [] },\r\n    { file: \"tests/data/mapbox/vector_tile.proto\", flags: [] },\r\n    { file: \"tests/data/package.proto\", flags: [] },\r\n    { file: \"tests/data/rpc.proto\", flags: [ \"es6\" ] },\r\n    { file: \"tests/data/rpc.proto\", flags: [] },\r\n    { file: \"tests/data/test.proto\", flags: [] },\r\n    { file: \"bench/data/bench.proto\", flags: [\"no-create\", \"no-verify\", \"no-delimited\", \"no-convert\", \"no-comments\"], out: \"bench/data/static_pbjs.js\" }\r\n]\r\n.forEach(function({ file, flags, out }) {\r\n    var basename = file.replace(/\\.proto$/, \"\");\r\n    if (!out)\r\n        out = [ basename ].concat(flags).join(\"-\") + \".js\";\r\n    pbjs.main([\r\n        \"--target\", \"static-module\",\r\n        \"--wrap\", \"commonjs\",\r\n        \"--root\", \"test_\" + path.basename(basename, \".js\"),\r\n        file\r\n    ].concat(flags.map(function(flag) {\r\n        return \"--\" + flag;\r\n    })), function(err, output) {\r\n        if (err)\r\n            throw err;\r\n        var pathToProtobufjs = path.relative(path.dirname(out), \"minimal\").replace(/\\\\/g, \"/\");\r\n        fs.writeFileSync(out, output.replace(/\"protobufjs\\/minimal\"/g, JSON.stringify(pathToProtobufjs)));\r\n        process.stdout.write(\"pbjs: \" + file + \" -> \" + out + \"\\n\");\r\n        try {\r\n            require(path.join(__dirname, \"..\", out));\r\n        } catch (err) {\r\n            if (!flags.includes(\"es6\")) {\r\n                process.stderr.write(\"ERROR: \" + err.message + \"\\n\");\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n[\r\n    \"tests/data/rpc.js\",\r\n    \"tests/data/test.js\",\r\n]\r\n.forEach(function(file) {\r\n    var out = file.replace(/\\.js$/, \".d.ts\");\r\n    pbts.main([\r\n        \"--no-comments\",\r\n        file\r\n    ], function(err, output) {\r\n        if (err)\r\n            throw err;\r\n        var pathToProtobufjs = path.relative(path.dirname(out), \"\").replace(/\\\\/g, \"/\");\r\n        fs.writeFileSync(out, output.replace(/\"protobufjs\"/g, JSON.stringify(pathToProtobufjs)));\r\n        process.stdout.write(\"pbts: \" + file + \" -> \" + out + \"\\n\");\r\n    });\r\n});","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/gulpfile.js":"var gulp   = require(\"gulp\"),\r\n    bundle = require(\"./bundle\");\r\n\r\nvar defaultTask = [];\r\n\r\nfunction defineTask(name, entry, target) {\r\n    gulp.task(name + \"-bundle\", bundle.bind(this, {\r\n        entry    : entry,\r\n        target   : target\r\n    }));\r\n    gulp.task(name + \"-minify\" , [ name + \"-bundle\" ], bundle.bind(this, {\r\n        entry    : entry,\r\n        target   : target,\r\n        compress : true\r\n    }));\r\n    gulp.task(name + \"-compress\", [ name + \"-minify\" ], function(callback) {\r\n        bundle.compress(\r\n            target + \"/protobuf.min.js\",\r\n            target + \"/protobuf.min.js.gz\",\r\n            callback\r\n        );\r\n    });\r\n    defaultTask.push(name + \"-bundle\", name + \"-minify\", name + \"-compress\");\r\n}\r\n\r\ndefineTask(\"full\"   , \"../src/index\"        , \"../dist\"        );\r\ndefineTask(\"light\"  , \"../src/index-light\"  , \"../dist/light\"  );\r\ndefineTask(\"minimal\", \"../src/index-minimal\", \"../dist/minimal\");\r\n\r\ngulp.task(\"default\", defaultTask);\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/pages.js":"/*eslint-disable no-console*/\r\n\"use strict\";\r\n\r\nvar ghpages = require(\"gh-pages\"),\r\n    path    = require(\"path\");\r\n\r\nghpages.publish(path.join(__dirname, \"..\", \"docs\"), {\r\n    logger: function(message) {\r\n        console.log(message);\r\n    }\r\n}, function(err) {\r\n    if (err)\r\n        console.error(err);\r\n    else\r\n        console.log(\"done\");\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/postinstall.js":"\"use strict\";\r\n\r\nvar path = require(\"path\"),\r\n    fs   = require(\"fs\"),\r\n    pkg  = require(path.join(__dirname, \"..\", \"package.json\"));\r\n\r\n// ensure that there is a node_modules folder for cli dependencies\r\ntry { fs.mkdirSync(path.join(__dirname, \"..\", \"cli\", \"node_modules\")); } catch (e) {/**/}\r\n\r\n// check version scheme used by dependents\r\nif (!pkg.versionScheme)\r\n    return;\r\n\r\nvar warn = process.stderr.isTTY\r\n    ? \"\\x1b[30m\\x1b[43mWARN\\x1b[0m \\x1b[35m\" + path.basename(process.argv[1], \".js\") + \"\\x1b[0m\"\r\n    : \"WARN \" + path.basename(process.argv[1], \".js\");\r\n\r\nvar basePkg;\r\ntry {\r\n    basePkg = JSON.parse(fs.readFileSync(path.join(__dirname, \"..\", \"..\", \"package.json\")));\r\n} catch (e) {\r\n    return;\r\n}\r\n\r\n[\r\n    \"dependencies\",\r\n    \"devDependencies\",\r\n    \"optionalDependencies\",\r\n    \"peerDependencies\"\r\n]\r\n.forEach(function(check) {\r\n    var version = basePkg && basePkg[check] && basePkg[check][pkg.name];\r\n    if (typeof version === \"string\" && version.charAt(0) !== pkg.versionScheme)\r\n        process.stderr.write(pkg.name + \" \" + warn + \" \" + pkg.name + \"@\" + version + \" is configured as a dependency of \" + basePkg.name + \". use \" + pkg.name + \"@\" + pkg.versionScheme + version.substring(1) + \" instead for API compatibility.\\n\");\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/scripts/prepublish.js":"\"use strict\";\r\n\r\nvar path = require(\"path\"),\r\n    fs   = require(\"fs\");\r\n\r\n// ensure LF on bin files\r\n[\r\n    path.join(__dirname, \"..\", \"bin\", \"pbjs\"),\r\n    path.join(__dirname, \"..\", \"bin\", \"pbts\")\r\n]\r\n.forEach(function(file) {\r\n    fs.writeFileSync(file, fs.readFileSync(file).toString(\"utf8\").replace(/\\r?\\n/g, \"\\n\"), \"utf8\");\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/bench/data/static_jspb.js":"/*eslint-disable*/\n/**\n * @fileoverview\n * @enhanceable\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.Outer', null, global);\ngoog.exportSymbol('proto.Test', null, global);\ngoog.exportSymbol('proto.Test.Enum', null, global);\ngoog.exportSymbol('proto.Test.Inner', null, global);\ngoog.exportSymbol('proto.Test.Inner.InnerInner', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Test = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Test, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Test.displayName = 'proto.Test';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Test.prototype.toObject = function(opt_includeInstance) {\n  return proto.Test.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Test} msg The msg instance to transform.\n * @return {!Object}\n */\nproto.Test.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    string: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    uint32: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    inner: (f = msg.getInner()) && proto.Test.Inner.toObject(includeInstance, f),\n    pb_float: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Test}\n */\nproto.Test.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Test;\n  return proto.Test.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Test} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Test}\n */\nproto.Test.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setString(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setUint32(value);\n      break;\n    case 3:\n      var value = new proto.Test.Inner;\n      reader.readMessage(value,proto.Test.Inner.deserializeBinaryFromReader);\n      msg.setInner(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readFloat());\n      msg.setFloat(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Test.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Test.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Test} message\n * @param {!jspb.BinaryWriter} writer\n */\nproto.Test.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getString();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getUint32();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getInner();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.Test.Inner.serializeBinaryToWriter\n    );\n  }\n  f = message.getFloat();\n  if (f !== 0.0) {\n    writer.writeFloat(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.Test.Enum = {\n  ONE: 0,\n  TWO: 1,\n  THREE: 2,\n  FOUR: 3,\n  FIVE: 4\n};\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Test.Inner = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Test.Inner, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Test.Inner.displayName = 'proto.Test.Inner';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Test.Inner.prototype.toObject = function(opt_includeInstance) {\n  return proto.Test.Inner.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Test.Inner} msg The msg instance to transform.\n * @return {!Object}\n */\nproto.Test.Inner.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    int32: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    innerinner: (f = msg.getInnerinner()) && proto.Test.Inner.InnerInner.toObject(includeInstance, f),\n    outer: (f = msg.getOuter()) && proto.Outer.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Test.Inner}\n */\nproto.Test.Inner.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Test.Inner;\n  return proto.Test.Inner.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Test.Inner} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Test.Inner}\n */\nproto.Test.Inner.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setInt32(value);\n      break;\n    case 2:\n      var value = new proto.Test.Inner.InnerInner;\n      reader.readMessage(value,proto.Test.Inner.InnerInner.deserializeBinaryFromReader);\n      msg.setInnerinner(value);\n      break;\n    case 3:\n      var value = new proto.Outer;\n      reader.readMessage(value,proto.Outer.deserializeBinaryFromReader);\n      msg.setOuter(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Test.Inner.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Test.Inner.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Test.Inner} message\n * @param {!jspb.BinaryWriter} writer\n */\nproto.Test.Inner.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getInt32();\n  if (f !== 0) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f = message.getInnerinner();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.Test.Inner.InnerInner.serializeBinaryToWriter\n    );\n  }\n  f = message.getOuter();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.Outer.serializeBinaryToWriter\n    );\n  }\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Test.Inner.InnerInner = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Test.Inner.InnerInner, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Test.Inner.InnerInner.displayName = 'proto.Test.Inner.InnerInner';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Test.Inner.InnerInner.prototype.toObject = function(opt_includeInstance) {\n  return proto.Test.Inner.InnerInner.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Test.Inner.InnerInner} msg The msg instance to transform.\n * @return {!Object}\n */\nproto.Test.Inner.InnerInner.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    pb_long: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    pb_enum: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    sint32: jspb.Message.getFieldWithDefault(msg, 3, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Test.Inner.InnerInner}\n */\nproto.Test.Inner.InnerInner.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Test.Inner.InnerInner;\n  return proto.Test.Inner.InnerInner.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Test.Inner.InnerInner} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Test.Inner.InnerInner}\n */\nproto.Test.Inner.InnerInner.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setLong(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.Test.Enum} */ (reader.readEnum());\n      msg.setEnum(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readSint32());\n      msg.setSint32(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Test.Inner.InnerInner.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Test.Inner.InnerInner.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Test.Inner.InnerInner} message\n * @param {!jspb.BinaryWriter} writer\n */\nproto.Test.Inner.InnerInner.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getLong();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getEnum();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getSint32();\n  if (f !== 0) {\n    writer.writeSint32(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 long = 1;\n * @return {number}\n */\nproto.Test.Inner.InnerInner.prototype.getLong = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Test.Inner.InnerInner.prototype.setLong = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * optional Enum enum = 2;\n * @return {!proto.Test.Enum}\n */\nproto.Test.Inner.InnerInner.prototype.getEnum = function() {\n  return /** @type {!proto.Test.Enum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {!proto.Test.Enum} value */\nproto.Test.Inner.InnerInner.prototype.setEnum = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * optional sint32 sint32 = 3;\n * @return {number}\n */\nproto.Test.Inner.InnerInner.prototype.getSint32 = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.Test.Inner.InnerInner.prototype.setSint32 = function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\n/**\n * optional int32 int32 = 1;\n * @return {number}\n */\nproto.Test.Inner.prototype.getInt32 = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.Test.Inner.prototype.setInt32 = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * optional InnerInner innerInner = 2;\n * @return {?proto.Test.Inner.InnerInner}\n */\nproto.Test.Inner.prototype.getInnerinner = function() {\n  return /** @type{?proto.Test.Inner.InnerInner} */ (\n    jspb.Message.getWrapperField(this, proto.Test.Inner.InnerInner, 2));\n};\n\n\n/** @param {?proto.Test.Inner.InnerInner|undefined} value */\nproto.Test.Inner.prototype.setInnerinner = function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.Test.Inner.prototype.clearInnerinner = function() {\n  this.setInnerinner(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Test.Inner.prototype.hasInnerinner = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional Outer outer = 3;\n * @return {?proto.Outer}\n */\nproto.Test.Inner.prototype.getOuter = function() {\n  return /** @type{?proto.Outer} */ (\n    jspb.Message.getWrapperField(this, proto.Outer, 3));\n};\n\n\n/** @param {?proto.Outer|undefined} value */\nproto.Test.Inner.prototype.setOuter = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Test.Inner.prototype.clearOuter = function() {\n  this.setOuter(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Test.Inner.prototype.hasOuter = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional string string = 1;\n * @return {string}\n */\nproto.Test.prototype.getString = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Test.prototype.setString = function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\n/**\n * optional uint32 uint32 = 2;\n * @return {number}\n */\nproto.Test.prototype.getUint32 = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.Test.prototype.setUint32 = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\n/**\n * optional Inner inner = 3;\n * @return {?proto.Test.Inner}\n */\nproto.Test.prototype.getInner = function() {\n  return /** @type{?proto.Test.Inner} */ (\n    jspb.Message.getWrapperField(this, proto.Test.Inner, 3));\n};\n\n\n/** @param {?proto.Test.Inner|undefined} value */\nproto.Test.prototype.setInner = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Test.prototype.clearInner = function() {\n  this.setInner(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Test.prototype.hasInner = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional float float = 4;\n * @return {number}\n */\nproto.Test.prototype.getFloat = function() {\n  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));\n};\n\n\n/** @param {number} value */\nproto.Test.prototype.setFloat = function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Outer = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Outer.repeatedFields_, null);\n};\ngoog.inherits(proto.Outer, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Outer.displayName = 'proto.Outer';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Outer.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Outer.prototype.toObject = function(opt_includeInstance) {\n  return proto.Outer.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Outer} msg The msg instance to transform.\n * @return {!Object}\n */\nproto.Outer.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    boolList: jspb.Message.getField(msg, 1),\n    pb_double: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Outer}\n */\nproto.Outer.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Outer;\n  return proto.Outer.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Outer} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Outer}\n */\nproto.Outer.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());\n      msg.setBoolList(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readDouble());\n      msg.setDouble(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Outer.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Outer.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Outer} message\n * @param {!jspb.BinaryWriter} writer\n */\nproto.Outer.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getBoolList();\n  if (f.length > 0) {\n    writer.writePackedBool(\n      1,\n      f\n    );\n  }\n  f = message.getDouble();\n  if (f !== 0.0) {\n    writer.writeDouble(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bool bool = 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val === true/false} in those cases.\n * If you change this array by adding, removing or replacing elements, or if you\n * replace the array itself, then you must call the setter to update it.\n * @return {!Array.<boolean>}\n */\nproto.Outer.prototype.getBoolList = function() {\n  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {!Array.<boolean>} value */\nproto.Outer.prototype.setBoolList = function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!boolean} value\n * @param {number=} opt_index\n */\nproto.Outer.prototype.addBool = function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.Outer.prototype.clearBoolList = function() {\n  this.setBoolList([]);\n};\n\n\n/**\n * optional double double = 2;\n * @return {number}\n */\nproto.Outer.prototype.getDouble = function() {\n  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));\n};\n\n\n/** @param {number} value */\nproto.Outer.prototype.setDouble = function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, proto);\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/bench/data/static_pbjs.js":"/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"../../minimal\");\n\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\nvar $root = $protobuf.roots.test_bench || ($protobuf.roots.test_bench = {});\n\n$root.Test = (function() {\n\n    function Test(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    Test.prototype.string = \"\";\n    Test.prototype.uint32 = 0;\n    Test.prototype.inner = null;\n    Test.prototype.float = 0;\n\n    Test.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.string != null && message.hasOwnProperty(\"string\"))\n            writer.uint32(10).string(message.string);\n        if (message.uint32 != null && message.hasOwnProperty(\"uint32\"))\n            writer.uint32(16).uint32(message.uint32);\n        if (message.inner != null && message.hasOwnProperty(\"inner\"))\n            $root.Test.Inner.encode(message.inner, writer.uint32(26).fork()).ldelim();\n        if (message.float != null && message.hasOwnProperty(\"float\"))\n            writer.uint32(37).float(message.float);\n        return writer;\n    };\n\n    Test.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Test();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.string = reader.string();\n                break;\n            case 2:\n                message.uint32 = reader.uint32();\n                break;\n            case 3:\n                message.inner = $root.Test.Inner.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.float = reader.float();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    Test.Inner = (function() {\n\n        function Inner(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        Inner.prototype.int32 = 0;\n        Inner.prototype.innerInner = null;\n        Inner.prototype.outer = null;\n\n        Inner.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.int32 != null && message.hasOwnProperty(\"int32\"))\n                writer.uint32(8).int32(message.int32);\n            if (message.innerInner != null && message.hasOwnProperty(\"innerInner\"))\n                $root.Test.Inner.InnerInner.encode(message.innerInner, writer.uint32(18).fork()).ldelim();\n            if (message.outer != null && message.hasOwnProperty(\"outer\"))\n                $root.Outer.encode(message.outer, writer.uint32(26).fork()).ldelim();\n            return writer;\n        };\n\n        Inner.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Test.Inner();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.int32 = reader.int32();\n                    break;\n                case 2:\n                    message.innerInner = $root.Test.Inner.InnerInner.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.outer = $root.Outer.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        Inner.InnerInner = (function() {\n\n            function InnerInner(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            InnerInner.prototype.long = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n            InnerInner.prototype[\"enum\"] = 0;\n            InnerInner.prototype.sint32 = 0;\n\n            InnerInner.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.long != null && message.hasOwnProperty(\"long\"))\n                    writer.uint32(8).int64(message.long);\n                if (message[\"enum\"] != null && message.hasOwnProperty(\"enum\"))\n                    writer.uint32(16).uint32(message[\"enum\"]);\n                if (message.sint32 != null && message.hasOwnProperty(\"sint32\"))\n                    writer.uint32(24).sint32(message.sint32);\n                return writer;\n            };\n\n            InnerInner.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Test.Inner.InnerInner();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.long = reader.int64();\n                        break;\n                    case 2:\n                        message[\"enum\"] = reader.uint32();\n                        break;\n                    case 3:\n                        message.sint32 = reader.sint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            return InnerInner;\n        })();\n\n        return Inner;\n    })();\n\n    Test.Enum = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"ONE\"] = 0;\n        values[valuesById[1] = \"TWO\"] = 1;\n        values[valuesById[2] = \"THREE\"] = 2;\n        values[valuesById[3] = \"FOUR\"] = 3;\n        values[valuesById[4] = \"FIVE\"] = 4;\n        return values;\n    })();\n\n    return Test;\n})();\n\n$root.Outer = (function() {\n\n    function Outer(properties) {\n        this.bool = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    Outer.prototype.bool = $util.emptyArray;\n    Outer.prototype.double = 0;\n\n    Outer.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.bool != null && message.bool.length) {\n            writer.uint32(10).fork();\n            for (var i = 0; i < message.bool.length; ++i)\n                writer.bool(message.bool[i]);\n            writer.ldelim();\n        }\n        if (message.double != null && message.hasOwnProperty(\"double\"))\n            writer.uint32(17).double(message.double);\n        return writer;\n    };\n\n    Outer.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Outer();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.bool && message.bool.length))\n                    message.bool = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.bool.push(reader.bool());\n                } else\n                    message.bool.push(reader.bool());\n                break;\n            case 2:\n                message.double = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    return Outer;\n})();\n\nmodule.exports = $root;\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/json.js":"\"use strict\";\r\nmodule.exports = json_target;\r\n\r\njson_target.description = \"JSON representation\";\r\n\r\nfunction json_target(root, options, callback) {\r\n    callback(null, JSON.stringify(root, null, 2));\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/json-module.js":"\"use strict\";\r\nmodule.exports = json_module;\r\n\r\nvar util = require(\"../util\");\r\n\r\njson_module.description = \"JSON representation as a module\";\r\n\r\nfunction json_module(root, options, callback) {\r\n    try {\r\n        var rootProp = util.safeProp(options.root || \"default\");\r\n        var output = [\r\n            (options.es6 ? \"const\" : \"var\") + \" $root = ($protobuf.roots\" + rootProp + \" || ($protobuf.roots\" + rootProp + \" = new $protobuf.Root()))\\n\"\r\n        ];\r\n        if (root.options) {\r\n            var optionsJson = util.jsonSafeProp(JSON.stringify(root.options, null, 2));\r\n            output.push(\".setOptions(\" + optionsJson + \")\\n\");\r\n        }\r\n        var json = util.jsonSafeProp(JSON.stringify(root.nested, null, 2).trim());\r\n        output.push(\".addJSON(\" + json + \");\");\r\n        output = util.wrap(output.join(\"\"), options);\r\n        process.nextTick(function() {\r\n            callback(null, output);\r\n        });\r\n    } catch (e) {\r\n        return callback(e);\r\n    }\r\n    return undefined;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/proto2.js":"\"use strict\";\r\nmodule.exports = proto2_target;\r\n\r\nvar protobuf = require(\"../..\");\r\n\r\nproto2_target.description = \"Protocol Buffers, Version 2\";\r\n\r\nfunction proto2_target(root, options, callback) {\r\n    require(\"./proto\")(root, protobuf.util.merge(options, { syntax: \"proto2\" }), callback);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/proto3.js":"\"use strict\";\r\nmodule.exports = proto3_target;\r\n\r\nvar protobuf = require(\"../..\");\r\n\r\nproto3_target.description = \"Protocol Buffers, Version 3\";\r\n\r\nfunction proto3_target(root, options, callback) {\r\n    require(\"./proto\")(root, protobuf.util.merge(options, { syntax: \"proto3\" }), callback);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/proto.js":"\"use strict\";\r\nmodule.exports = proto_target;\r\n\r\nproto_target.private = true;\r\n\r\nvar protobuf = require(\"../..\");\r\n\r\nvar Namespace  = protobuf.Namespace,\r\n    Enum       = protobuf.Enum,\r\n    Type       = protobuf.Type,\r\n    Field      = protobuf.Field,\r\n    OneOf      = protobuf.OneOf,\r\n    Service    = protobuf.Service,\r\n    Method     = protobuf.Method,\r\n    types      = protobuf.types,\r\n    util       = protobuf.util;\r\n\r\nfunction underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n}\r\n\r\nvar out = [];\r\nvar indent = 0;\r\nvar first = false;\r\nvar syntax = 3;\r\n\r\nfunction proto_target(root, options, callback) {\r\n    if (options) {\r\n        switch (options.syntax) {\r\n            case undefined:\r\n            case \"proto3\":\r\n            case \"3\":\r\n                syntax = 3;\r\n                break;\r\n            case \"proto2\":\r\n            case \"2\":\r\n                syntax = 2;\r\n                break;\r\n            default:\r\n                return callback(Error(\"invalid syntax: \" + options.syntax));\r\n        }\r\n    }\r\n    indent = 0;\r\n    first = false;\r\n    try {\r\n        buildRoot(root);\r\n        return callback(null, out.join(\"\\n\"));\r\n    } catch (err) {\r\n        return callback(err);\r\n    } finally {\r\n        out = [];\r\n        syntax = 3;\r\n    }\r\n}\r\n\r\nfunction push(line) {\r\n    if (line === \"\")\r\n        out.push(\"\");\r\n    else {\r\n        var ind = \"\";\r\n        for (var i = 0; i < indent; ++i)\r\n            ind += \"    \";\r\n        out.push(ind + line);\r\n    }\r\n}\r\n\r\nfunction escape(str) {\r\n    return str.replace(/[\\\\\"']/g, \"\\\\$&\")\r\n              .replace(/\\r/g, \"\\\\r\")\r\n              .replace(/\\n/g, \"\\\\n\")\r\n              .replace(/\\u0000/g, \"\\\\0\");\r\n}\r\n\r\nfunction value(v) {\r\n    switch (typeof v) {\r\n        case \"boolean\":\r\n            return v ? \"true\" : \"false\";\r\n        case \"number\":\r\n            return v.toString();\r\n        default:\r\n            return \"\\\"\" + escape(String(v)) + \"\\\"\";\r\n    }\r\n}\r\n\r\nfunction buildRoot(root) {\r\n    root.resolveAll();\r\n    var pkg = [];\r\n    var ptr = root;\r\n    var repeat = true;\r\n    do {\r\n        var nested = ptr.nestedArray;\r\n        if (nested.length === 1 && nested[0] instanceof Namespace && !(nested[0] instanceof Type || nested[0] instanceof Service)) {\r\n            ptr = nested[0];\r\n            if (ptr !== root)\r\n                pkg.push(ptr.name);\r\n        } else\r\n            repeat = false;\r\n    } while (repeat);\r\n    out.push(\"syntax = \\\"proto\" + syntax + \"\\\";\");\r\n    if (pkg.length)\r\n        out.push(\"\", \"package \" + pkg.join(\".\") + \";\");\r\n\r\n    buildOptions(ptr);\r\n    ptr.nestedArray.forEach(build);\r\n}\r\n\r\nfunction build(object) {\r\n    if (object instanceof Enum)\r\n        buildEnum(object);\r\n    else if (object instanceof Type)\r\n        buildType(object);\r\n    else if (object instanceof Field)\r\n        buildField(object);\r\n    else if (object instanceof OneOf)\r\n        buildOneOf(object);\r\n    else if (object instanceof Service)\r\n        buildService(object);\r\n    else if (object instanceof Method)\r\n        buildMethod(object);\r\n    else\r\n        buildNamespace(object);\r\n}\r\n\r\nfunction buildNamespace(namespace) { // just a namespace, not a type etc.\r\n    push(\"\");\r\n    push(\"message \" + namespace.name + \" {\");\r\n    ++indent;\r\n    buildOptions(namespace);\r\n    consolidateExtends(namespace.nestedArray).remaining.forEach(build);\r\n    --indent;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildEnum(enm) {\r\n    push(\"\");\r\n    push(\"enum \" + enm.name + \" {\");\r\n    buildOptions(enm);\r\n    ++indent; first = true;\r\n    Object.keys(enm.values).forEach(function(name) {\r\n        var val = enm.values[name];\r\n        if (first) {\r\n            push(\"\");\r\n            first = false;\r\n        }\r\n        push(name + \" = \" + val + \";\");\r\n    });\r\n    --indent; first = false;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildRanges(keyword, ranges) {\r\n    if (ranges && ranges.length) {\r\n        var parts = [];\r\n        ranges.forEach(function(range) {\r\n            if (typeof range === \"string\")\r\n                parts.push(\"\\\"\" + escape(range) + \"\\\"\");\r\n            else if (range[0] === range[1])\r\n                parts.push(range[0]);\r\n            else\r\n                parts.push(range[0] + \" to \" + (range[1] === 0x1FFFFFFF ? \"max\" : range[1]));\r\n        });\r\n        push(\"\");\r\n        push(keyword + \" \" + parts.join(\", \"));\r\n    }\r\n}\r\n\r\nfunction buildType(type) {\r\n    if (type.group)\r\n        return; // built with the sister-field\r\n    push(\"\");\r\n    push(\"message \" + type.name + \" {\");\r\n    ++indent;\r\n    buildOptions(type);\r\n    type.oneofsArray.forEach(build);\r\n    first = true;\r\n    type.fieldsArray.forEach(build);\r\n    consolidateExtends(type.nestedArray).remaining.forEach(build);\r\n    buildRanges(\"extensions\", type.extensions);\r\n    buildRanges(\"reserved\", type.reserved);\r\n    --indent;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildField(field, passExtend) {\r\n    if (field.partOf || field.declaringField || field.extend !== undefined && !passExtend)\r\n        return;\r\n    if (first) {\r\n        first = false;\r\n        push(\"\");\r\n    }\r\n    if (field.resolvedType && field.resolvedType.group) {\r\n        buildGroup(field);\r\n        return;\r\n    }\r\n    var sb = [];\r\n    if (field.map)\r\n        sb.push(\"map<\" + field.keyType + \", \" + field.type + \">\");\r\n    else if (field.repeated)\r\n        sb.push(\"repeated\", field.type);\r\n    else if (syntax === 2 || field.parent.group)\r\n        sb.push(field.required ? \"required\" : \"optional\", field.type);\r\n    else\r\n        sb.push(field.type);\r\n    sb.push(underScore(field.name), \"=\", field.id);\r\n    var opts = buildFieldOptions(field);\r\n    if (opts)\r\n        sb.push(opts);\r\n    push(sb.join(\" \") + \";\");\r\n}\r\n\r\nfunction buildGroup(field) {\r\n    push(field.rule + \" group \" + field.resolvedType.name + \" = \" + field.id + \" {\");\r\n    ++indent;\r\n    buildOptions(field.resolvedType);\r\n    first = true;\r\n    field.resolvedType.fieldsArray.forEach(function(field) {\r\n        buildField(field);\r\n    });\r\n    --indent;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildFieldOptions(field) {\r\n    var keys;\r\n    if (!field.options || !(keys = Object.keys(field.options)).length)\r\n        return null;\r\n    var sb = [];\r\n    keys.forEach(function(key) {\r\n        var val = field.options[key];\r\n        var wireType = types.packed[field.resolvedType instanceof Enum ? \"uint32\" : field.type];\r\n        switch (key) {\r\n            case \"packed\":\r\n                val = Boolean(val);\r\n                // skip when not packable or syntax default\r\n                if (wireType === undefined || syntax === 3 === val)\r\n                    return;\r\n                break;\r\n            case \"default\":\r\n                // skip default (resolved) default values\r\n                if (field.long && !util.longNeq(field.defaultValue, types.defaults[field.type]) || !field.long && field.defaultValue === types.defaults[field.type])\r\n                    return;\r\n                // enum defaults specified as strings are type references and not enclosed in quotes\r\n                if (field.resolvedType instanceof Enum)\r\n                    break;\r\n                // otherwise fallthrough\r\n            default:\r\n                val = value(val);\r\n                break;\r\n        }\r\n        sb.push(key + \"=\" + val);\r\n    });\r\n    return sb.length\r\n        ? \"[\" + sb.join(\", \") + \"]\"\r\n        : null;\r\n}\r\n\r\nfunction consolidateExtends(nested) {\r\n    var ext = {};\r\n    nested = nested.filter(function(obj) {\r\n        if (!(obj instanceof Field) || obj.extend === undefined)\r\n            return true;\r\n        (ext[obj.extend] || (ext[obj.extend] = [])).push(obj);\r\n        return false;\r\n    });\r\n    Object.keys(ext).forEach(function(extend) {\r\n        push(\"\");\r\n        push(\"extend \" + extend + \" {\");\r\n        ++indent; first = true;\r\n        ext[extend].forEach(function(field) {\r\n            buildField(field, true);\r\n        });\r\n        --indent;\r\n        push(\"}\");\r\n    });\r\n    return {\r\n        remaining: nested\r\n    };\r\n}\r\n\r\nfunction buildOneOf(oneof) {\r\n    push(\"\");\r\n    push(\"oneof \" + underScore(oneof.name) + \" {\");\r\n    ++indent; first = true;\r\n    oneof.oneof.forEach(function(fieldName) {\r\n        var field = oneof.parent.get(fieldName);\r\n        if (first) {\r\n            first = false;\r\n            push(\"\");\r\n        }\r\n        var opts = buildFieldOptions(field);\r\n        push(field.type + \" \" + underScore(field.name) + \" = \" + field.id + (opts ? \" \" + opts : \"\") + \";\");\r\n    });\r\n    --indent;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildService(service) {\r\n    push(\"service \" + service.name + \" {\");\r\n    ++indent;\r\n    service.methodsArray.forEach(build);\r\n    consolidateExtends(service.nestedArray).remaining.forEach(build);\r\n    --indent;\r\n    push(\"}\");\r\n}\r\n\r\nfunction buildMethod(method) {\r\n    push(method.type + \" \" + method.name + \" (\" + (method.requestStream ? \"stream \" : \"\") + method.requestType + \") returns (\" + (method.responseStream ? \"stream \" : \"\") + method.responseType + \");\");\r\n}\r\n\r\nfunction buildOptions(object) {\r\n    if (!object.options)\r\n        return;\r\n    first = true;\r\n    Object.keys(object.options).forEach(function(key) {\r\n        if (first) {\r\n            first = false;\r\n            push(\"\");\r\n        }\r\n        var val = object.options[key];\r\n        push(\"option \" + key + \" = \" + JSON.stringify(val) + \";\");\r\n    });\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/static.js":"\"use strict\";\r\nmodule.exports = static_target;\r\n\r\nvar protobuf   = require(\"../..\"),\r\n    cliUtil    = require(\"../util\"),\r\n    UglifyJS   = require(\"uglify-js\"),\r\n    espree     = require(\"espree\"),\r\n    escodegen  = require(\"escodegen\"),\r\n    estraverse = require(\"estraverse\");\r\n\r\nvar Type      = protobuf.Type,\r\n    Service   = protobuf.Service,\r\n    Enum      = protobuf.Enum,\r\n    Namespace = protobuf.Namespace,\r\n    Class     = protobuf.Class,\r\n    util      = protobuf.util;\r\n\r\nvar out = [];\r\nvar indent = 0;\r\nvar config = {};\r\n\r\nstatic_target.description = \"Static code without reflection (non-functional on its own)\";\r\n\r\nfunction static_target(root, options, callback) {\r\n    config = options;\r\n    try {\r\n        var aliases = [];\r\n        if (config.decode)\r\n            aliases.push(\"Reader\");\r\n        if (config.encode)\r\n            aliases.push(\"Writer\");\r\n        aliases.push(\"util\");\r\n        if (aliases.length) {\r\n            if (config.comments)\r\n                push(\"// Common aliases\");\r\n            push((config.es6 ? \"const \" : \"var \") + aliases.map(function(name) { return \"$\" + name + \" = $protobuf.\" + name; }).join(\", \") + \";\");\r\n            push(\"\");\r\n        }\r\n        if (config.comments) {\r\n            if (root.comment)\r\n                pushComment(\"@fileoverview \" + root.comment);\r\n            else\r\n                push(\"// Exported root namespace\");\r\n        }\r\n        var rootProp = cliUtil.safeProp(config.root || \"default\");\r\n        push((config.es6 ? \"const\" : \"var\") + \" $root = $protobuf.roots\" + rootProp + \" || ($protobuf.roots\" + rootProp + \" = {});\");\r\n        buildNamespace(null, root);\r\n        return callback(null, out.join(\"\\n\"));\r\n    } catch (err) {\r\n        return callback(err);\r\n    } finally {\r\n        out = [];\r\n        indent = 0;\r\n        config = {};\r\n    }\r\n}\r\n\r\nfunction push(line) {\r\n    if (line === \"\")\r\n        return out.push(\"\");\r\n    var ind = \"\";\r\n    for (var i = 0; i < indent; ++i)\r\n        ind += \"    \";\r\n    return out.push(ind + line);\r\n}\r\n\r\nfunction pushComment(lines) {\r\n    if (!config.comments)\r\n        return;\r\n    var split = [];\r\n    for (var i = 0; i < lines.length; ++i)\r\n        if (lines[i] !== null && lines[i].substring(0, 8) !== \"@exclude\")\r\n            Array.prototype.push.apply(split, lines[i].split(/\\r?\\n/g));\r\n    push(\"/**\");\r\n    split.forEach(function(line) {\r\n        if (line === null)\r\n            return;\r\n        push(\" * \" + line.replace(/\\*\\//g, \"* /\"));\r\n    });\r\n    push(\" */\");\r\n}\r\n\r\nfunction name(name) {\r\n    if (!name)\r\n        return \"$root\";\r\n    return cliUtil.reserved(name) ? name + \"_\" : name;\r\n}\r\n\r\nfunction aOrAn(name) {\r\n    return ((/^[hH](?:ou|on|ei)/.test(name) || /^[aeiouAEIOU][a-z]/.test(name)) && !/^us/i.test(name)\r\n        ? \"an \"\r\n        : \"a \") + name;\r\n}\r\n\r\nfunction buildNamespace(ref, ns) {\r\n    if (!ns)\r\n        return;\r\n    if (ns.name !== \"\") {\r\n        push(\"\");\r\n        if (!ref && config.es6)\r\n            push(\"export const \" + name(ns.name) + \" = \" + name(ref) + \".\" + name(ns.name) + \" = (() => {\");\r\n        else\r\n            push(name(ref) + \".\" + name(ns.name) + \" = (function() {\");\r\n        ++indent;\r\n    }\r\n\r\n    if (ns instanceof Type) {\r\n        buildType(undefined, ns);\r\n    } else if (ns instanceof Service)\r\n        buildService(undefined, ns);\r\n    else if (ns.name !== \"\") {\r\n        push(\"\");\r\n        pushComment([\r\n            ns.comment || \"Namespace \" + ns.name + \".\",\r\n            \"@exports \" + ns.fullName.substring(1),\r\n            \"@namespace\"\r\n        ]);\r\n        push((config.es6 ? \"const\" : \"var\") + \" \" + name(ns.name) + \" = {};\");\r\n    }\r\n\r\n    ns.nestedArray.forEach(function(nested) {\r\n        if (nested instanceof Enum)\r\n            buildEnum(ns.name, nested);\r\n        else if (nested instanceof Namespace)\r\n            buildNamespace(ns.name, nested);\r\n    });\r\n    if (ns.name !== \"\") {\r\n        push(\"\");\r\n        push(\"return \" + name(ns.name) + \";\");\r\n        --indent;\r\n        push(\"})();\");\r\n    }\r\n}\r\n\r\nvar reduceableBlockStatements = {\r\n    IfStatement: true,\r\n    ForStatement: true,\r\n    WhileStatement: true\r\n};\r\n\r\nvar shortVars = {\r\n    \"r\": \"reader\",\r\n    \"w\": \"writer\",\r\n    \"m\": \"message\",\r\n    \"t\": \"tag\",\r\n    \"l\": \"length\",\r\n    \"c\": \"end\", \"c2\": \"end2\",\r\n    \"k\": \"key\",\r\n    \"ks\": \"keys\", \"ks2\": \"keys2\",\r\n    \"e\": \"error\",\r\n    \"f\": \"impl\",\r\n    \"o\": \"options\",\r\n    \"d\": \"object\",\r\n    \"n\": \"long\",\r\n    \"p\": \"properties\"\r\n};\r\n\r\nfunction beautifyCode(code) {\r\n    // Add semicolons\r\n    code = UglifyJS.minify(code, {\r\n        fromString: true,\r\n        compress: false,\r\n        mangle: false,\r\n        output: {\r\n            beautify: true\r\n        }\r\n    }).code;\r\n    // Properly beautify\r\n    var ast = espree.parse(code);\r\n    estraverse.replace(ast, {\r\n        enter: function(node, parent) {\r\n            // rename short vars\r\n            if (node.type === \"Identifier\" && (parent.property !== node || parent.computed) && shortVars[node.name])\r\n                return {\r\n                    \"type\": \"Identifier\",\r\n                    \"name\": shortVars[node.name]\r\n                };\r\n            // replace var with let if es6\r\n            if (config.es6 && node.type === \"VariableDeclaration\" && node.kind === \"var\") {\r\n                node.kind = \"let\";\r\n                return undefined;\r\n            }\r\n            // remove braces around block statements with a single child\r\n            if (node.type === \"BlockStatement\" && reduceableBlockStatements[parent.type] && node.body.length === 1)\r\n                return node.body[0];\r\n            return undefined;\r\n        }\r\n    });\r\n    code = escodegen.generate(ast, {\r\n        format: {\r\n            newline: \"\\n\",\r\n            quotes: \"double\"\r\n        }\r\n    });\r\n    // Add id, wireType comments\r\n    if (config.comments)\r\n        code = code.replace(/\\.uint32\\((\\d+)\\)/g, function($0, $1) {\r\n            var id = $1 >>> 3,\r\n                wireType = $1 & 7;\r\n            return \".uint32(/* id \" + id + \", wireType \" + wireType + \" =*/\" + $1 + \")\";\r\n        });\r\n    return code;\r\n}\r\n\r\nvar renameVars = {\r\n    \"Writer\": \"$Writer\",\r\n    \"Reader\": \"$Reader\",\r\n    \"util\": \"$util\"\r\n};\r\n\r\nfunction buildFunction(type, functionName, gen, scope) {\r\n    var code = gen.str(functionName)\r\n        .replace(/((?!\\.)types\\[\\d+])(\\.values)/g, \"$1\"); // enums: use types[N] instead of reflected types[N].values\r\n\r\n    var ast = espree.parse(code);\r\n    /* eslint-disable no-extra-parens */\r\n    estraverse.replace(ast, {\r\n        enter: function(node, parent) {\r\n            // rename vars\r\n            if (\r\n                node.type === \"Identifier\" && renameVars[node.name]\r\n                && (\r\n                    (parent.type === \"MemberExpression\" && parent.object === node)\r\n                 || (parent.type === \"BinaryExpression\" && parent.right === node)\r\n                )\r\n            )\r\n                return {\r\n                    \"type\": \"Identifier\",\r\n                    \"name\": renameVars[node.name]\r\n                };\r\n            // replace this.ctor with the actual ctor\r\n            if (\r\n                node.type === \"MemberExpression\"\r\n             && node.object.type === \"ThisExpression\"\r\n             && node.property.type === \"Identifier\" && node.property.name === \"ctor\"\r\n            )\r\n                return {\r\n                    \"type\": \"Identifier\",\r\n                    \"name\": \"$root\" + type.fullName\r\n                };\r\n            // replace types[N] with the field's actual type\r\n            if (\r\n                node.type === \"MemberExpression\"\r\n             && node.object.type === \"Identifier\" && node.object.name === \"types\"\r\n             && node.property.type === \"Literal\"\r\n            )\r\n                return {\r\n                    \"type\": \"Identifier\",\r\n                    \"name\": \"$root\" + type.fieldsArray[node.property.value].resolvedType.fullName\r\n                };\r\n            return undefined;\r\n        }\r\n    });\r\n    /* eslint-enable no-extra-parens */\r\n    code = escodegen.generate(ast, {\r\n        format: {\r\n            newline: \"\\n\",\r\n            quotes: \"double\"\r\n        }\r\n    });\r\n\r\n    if (config.beautify)\r\n        code = beautifyCode(code);\r\n\r\n    code = code.replace(/ {4}/g, \"\\t\");\r\n\r\n    var hasScope = scope && Object.keys(scope).length,\r\n        isCtor = functionName === type.name;\r\n\r\n    if (hasScope) // remove unused scope vars\r\n        Object.keys(scope).forEach(function(key) {\r\n            if (!new RegExp(\"\\\\b(\" + key + \")\\\\b\", \"g\").test(code))\r\n                delete scope[key];\r\n        });\r\n\r\n    var lines = code.split(/\\n/g);\r\n    if (isCtor) // constructor\r\n        push(lines[0]);\r\n    else if (hasScope) // enclose in an iife\r\n        push(name(type.name) + \".\" + functionName + \" = (function(\" + Object.keys(scope).join(\", \") + \") { return \" + lines[0]);\r\n    else\r\n        push(name(type.name) + \".\" + functionName + \" = \" + lines[0]);\r\n    lines.slice(1, lines.length - 1).forEach(function(line) {\r\n        var prev = indent;\r\n        var i = 0;\r\n        while (line.charAt(i++) === \"\\t\")\r\n            ++indent;\r\n        push(line.trim());\r\n        indent = prev;\r\n    });\r\n    if (isCtor)\r\n        push(\"}\");\r\n    else if (hasScope)\r\n        push(\"};})(\" + Object.keys(scope).map(function(key) { return scope[key]; }).join(\", \") + \");\");\r\n    else\r\n        push(\"};\");\r\n}\r\n\r\nfunction toJsType(field) {\r\n    var type;\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            type = \"number\";\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            type = config.forceLong ? \"Long\" : \"number|Long\";\r\n            break;\r\n        case \"bool\":\r\n            type = \"boolean\";\r\n            break;\r\n        case \"string\":\r\n            type = \"string\";\r\n            break;\r\n        case \"bytes\":\r\n            type = \"Uint8Array\";\r\n            break;\r\n        default:\r\n            if (field.resolve().resolvedType instanceof Enum)\r\n                type = field.resolvedType.fullName.substring(1); // reference the enum\r\n            else if (field.resolvedType instanceof Type)\r\n                type = field.resolvedType.fullName.substring(1) + (config.forceMessage ? \"\" : \"$Properties\"); // reference the typedef\r\n            else\r\n                type = \"*\"; // should not happen\r\n            break;\r\n    }\r\n    if (field.map)\r\n        return \"Object.<string,\" + type + \">\";\r\n    if (field.repeated)\r\n        return \"Array.<\" + type + \">\";\r\n    return type;\r\n}\r\n\r\nfunction buildType(ref, type) {\r\n    var fullName = type.fullName.substring(1);\r\n\r\n    if (config.comments) {\r\n        var typeDef = [\r\n            \"Properties of \" + aOrAn(type.name) + \".\",\r\n            \"@typedef \" + fullName + \"$Properties\",\r\n            \"@type {Object}\"\r\n        ];\r\n        type.fieldsArray.forEach(function(field) {\r\n            var prop = util.safeProp(field.name);\r\n            prop = prop.substring(1, prop.charAt(0) === \"[\" ? prop.length - 1 : prop.length);\r\n            typeDef.push(\"@property {\" + toJsType(field) + \"} \" + (field.optional ? \"[\" + prop + \"]\" : field.name) + \" \" + (field.comment || type.name + \" \" + field.name + \".\"));\r\n        });\r\n        push(\"\");\r\n        pushComment(typeDef);\r\n    }\r\n\r\n    // constructor\r\n    push(\"\");\r\n    pushComment([\r\n        \"Constructs a new \" + type.name + \".\",\r\n        type.comment ? \"@classdesc \" + type.comment : null,\r\n        \"@exports \" + fullName,\r\n        \"@constructor\",\r\n        \"@param {\" + fullName + \"$Properties=} [\" + (config.beautify ? \"properties\" : \"p\") + \"] Properties to set\"\r\n    ]);\r\n    buildFunction(type, type.name, Class.generate(type));\r\n\r\n    // default values\r\n    var firstField = true;\r\n    type.fieldsArray.forEach(function(field) {\r\n        field.resolve();\r\n        var prop = util.safeProp(field.name);\r\n        if (config.comments) {\r\n            push(\"\");\r\n            var jsType = toJsType(field);\r\n            if (field.optional && !field.map && !field.repeated && field.resolvedType instanceof Type)\r\n                jsType = \"(\" + jsType + \"|null)\";\r\n            pushComment([\r\n                field.comment || type.name + \" \" + field.name + \".\",\r\n                \"@type {\" + jsType + \"}\"\r\n            ]);\r\n        } else if (firstField) {\r\n            push(\"\");\r\n            firstField = false;\r\n        }\r\n        if (field.repeated)\r\n            push(name(type.name) + \".prototype\" + prop + \" = $util.emptyArray;\"); // overwritten in constructor\r\n        else if (field.map)\r\n            push(name(type.name) + \".prototype\" + prop + \" = $util.emptyObject;\"); // overwritten in constructor\r\n        else if (field.long)\r\n            push(name(type.name) + \".prototype\" + prop + \" = $util.Long ? $util.Long.fromBits(\"\r\n                    + JSON.stringify(field.typeDefault.low) + \",\"\r\n                    + JSON.stringify(field.typeDefault.high) + \",\"\r\n                    + JSON.stringify(field.typeDefault.unsigned)\r\n                + \") : \" + field.typeDefault.toNumber(field.type.charAt(0) === \"u\") + \";\");\r\n        else if (field.bytes) {\r\n            push(name(type.name) + \".prototype\" + prop + \" = $util.newBuffer(\" + JSON.stringify(Array.prototype.slice.call(field.typeDefault)) + \");\");\r\n        } else\r\n            push(name(type.name) + \".prototype\" + prop + \" = \" + JSON.stringify(field.typeDefault) + \";\");\r\n    });\r\n\r\n    // virtual oneof fields\r\n    var firstOneOf = true;\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        if (firstOneOf) {\r\n            firstOneOf = false;\r\n            push(\"\");\r\n            if (config.comments)\r\n                push(\"// OneOf field names bound to virtual getters and setters\");\r\n            push((config.es6 ? \"let\" : \"var\") + \" $oneOfFields;\");\r\n        }\r\n        oneof.resolve();\r\n        push(\"\");\r\n        pushComment([\r\n            oneof.comment || type.name + \" \" + oneof.name + \".\",\r\n            \"@name \" + fullName + \"#\" + name(oneof.name),\r\n            \"@type {string|undefined}\"\r\n        ]);\r\n        push(\"Object.defineProperty(\" + name(type.name) + \".prototype, \" + JSON.stringify(oneof.name) +\", {\");\r\n        ++indent;\r\n            push(\"get: $util.oneOfGetter($oneOfFields = [\" + oneof.oneof.map(JSON.stringify).join(\", \") + \"]),\");\r\n            push(\"set: $util.oneOfSetter($oneOfFields)\");\r\n        --indent;\r\n        push(\"});\");\r\n    });\r\n\r\n    if (config.create) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates a new \" + type.name + \" instance using the specified properties.\",\r\n            \"@param {\" + fullName + \"$Properties=} [properties] Properties to set\",\r\n            \"@returns {\" + fullName + \"} \" + type.name + \" instance\"\r\n        ]);\r\n        push(name(type.name) + \".create = function create(properties) {\");\r\n            ++indent;\r\n            push(\"return new \" + name(type.name) + \"(properties);\");\r\n            --indent;\r\n        push(\"};\");\r\n    }\r\n\r\n    if (config.encode) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Encodes the specified \" + type.name + \" message. Does not implicitly {@link \" + fullName + \".verify|verify} messages.\",\r\n            \"@param {\" + fullName + (config.forceMessage ? \"\" : \"$Properties\") + \"} \" + (config.beautify ? \"message\" : \"m\") + \" \" + type.name + \" message or plain object to encode\",\r\n            \"@param {$protobuf.Writer} [\" + (config.beautify ? \"writer\" : \"w\") + \"] Writer to encode to\",\r\n            \"@returns {$protobuf.Writer} Writer\"\r\n        ]);\r\n        buildFunction(type, \"encode\", protobuf.encoder(type));\r\n\r\n        if (config.delimited) {\r\n            push(\"\");\r\n            pushComment([\r\n                \"Encodes the specified \" + type.name + \" message, length delimited. Does not implicitly {@link \" + fullName + \".verify|verify} messages.\",\r\n                \"@param {\" + fullName + (config.forceMessage ? \"\" : \"$Properties\") + \"} message \" + type.name + \" message or plain object to encode\",\r\n                \"@param {$protobuf.Writer} [writer] Writer to encode to\",\r\n                \"@returns {$protobuf.Writer} Writer\"\r\n            ]);\r\n            push(name(type.name) + \".encodeDelimited = function encodeDelimited(message, writer) {\");\r\n            ++indent;\r\n            push(\"return this.encode(message, writer).ldelim();\");\r\n            --indent;\r\n            push(\"};\");\r\n        }\r\n    }\r\n\r\n    if (config.decode) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Decodes \" + aOrAn(type.name) + \" message from the specified reader or buffer.\",\r\n            \"@param {$protobuf.Reader|Uint8Array} \" + (config.beautify ? \"reader\" : \"r\") + \" Reader or buffer to decode from\",\r\n            \"@param {number} [\" + (config.beautify ? \"length\" : \"l\") + \"] Message length if known beforehand\",\r\n            \"@returns {\" + fullName + \"} \" + type.name,\r\n            \"@throws {Error} If the payload is not a reader or valid buffer\",\r\n            \"@throws {$protobuf.util.ProtocolError} If required fields are missing\"\r\n        ]);\r\n        buildFunction(type, \"decode\", protobuf.decoder(type));\r\n\r\n        if (config.delimited) {\r\n            push(\"\");\r\n            pushComment([\r\n                \"Decodes \" + aOrAn(type.name) + \" message from the specified reader or buffer, length delimited.\",\r\n                \"@param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\",\r\n                \"@returns {\" + fullName + \"} \" + type.name,\r\n                \"@throws {Error} If the payload is not a reader or valid buffer\",\r\n                \"@throws {$protobuf.util.ProtocolError} If required fields are missing\"\r\n            ]);\r\n            push(name(type.name) + \".decodeDelimited = function decodeDelimited(reader) {\");\r\n            ++indent;\r\n                push(\"if (!(reader instanceof $Reader))\");\r\n                ++indent;\r\n                    push(\"reader = $Reader(reader);\");\r\n                --indent;\r\n                push(\"return this.decode(reader, reader.uint32());\");\r\n            --indent;\r\n            push(\"};\");\r\n        }\r\n    }\r\n\r\n    if (config.verify) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Verifies \" + aOrAn(type.name) + \" message.\",\r\n            \"@param {Object.<string,*>} \" + (config.beautify ? \"message\" : \"m\") + \" Plain object to verify\",\r\n            \"@returns {?string} `null` if valid, otherwise the reason why it is not\"\r\n        ]);\r\n        buildFunction(type, \"verify\", protobuf.verifier(type));\r\n    }\r\n\r\n    if (config.convert) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates \" + aOrAn(type.name) + \" message from a plain object. Also converts values to their respective internal types.\",\r\n            \"@param {Object.<string,*>} \" + (config.beautify ? \"object\" : \"d\") + \" Plain object\",\r\n            \"@returns {\" + fullName + \"} \" + type.name\r\n        ]);\r\n        buildFunction(type, \"fromObject\", protobuf.converter.fromObject(type));\r\n\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates \" + aOrAn(type.name) + \" message from a plain object. Also converts values to their respective internal types.\",\r\n            \"This is an alias of {@link \" + fullName + \".fromObject}.\",\r\n            \"@function\",\r\n            \"@param {Object.<string,*>} object Plain object\",\r\n            \"@returns {\" + fullName + \"} \" + type.name\r\n        ]);\r\n        push(name(type.name) + \".from = \" + name(type.name) + \".fromObject;\");\r\n\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates a plain object from \" + aOrAn(type.name) + \" message. Also converts values to other types if specified.\",\r\n            \"@param {\" + fullName + \"} \" + (config.beautify ? \"message\" : \"m\") + \" \" + type.name,\r\n            \"@param {$protobuf.ConversionOptions} [\" + (config.beautify ? \"options\" : \"o\") + \"] Conversion options\",\r\n            \"@returns {Object.<string,*>} Plain object\"\r\n        ]);\r\n        buildFunction(type, \"toObject\", protobuf.converter.toObject(type));\r\n\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates a plain object from this \" + type.name + \" message. Also converts values to other types if specified.\",\r\n            \"@param {$protobuf.ConversionOptions} [options] Conversion options\",\r\n            \"@returns {Object.<string,*>} Plain object\"\r\n        ]);\r\n        push(name(type.name) + \".prototype.toObject = function toObject(options) {\");\r\n        ++indent;\r\n            push(\"return this.constructor.toObject(this, options);\");\r\n        --indent;\r\n        push(\"};\");\r\n\r\n        push(\"\");\r\n        pushComment([\r\n            \"Converts this \" + type.name + \" to JSON.\",\r\n            \"@returns {Object.<string,*>} JSON object\"\r\n        ]);\r\n        push(name(type.name) + \".prototype.toJSON = function toJSON() {\");\r\n        ++indent;\r\n            push(\"return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\");\r\n        --indent;\r\n        push(\"};\");\r\n    }\r\n}\r\n\r\nfunction buildService(ref, service) {\r\n    var fullName = service.fullName.substring(1);\r\n\r\n    push(\"\");\r\n    pushComment([\r\n        \"Constructs a new \" + service.name + \" service.\",\r\n        service.comment ? \"@classdesc \" + service.comment : null,\r\n        \"@exports \" + fullName,\r\n        \"@extends $protobuf.rpc.Service\",\r\n        \"@constructor\",\r\n        \"@param {$protobuf.RPCImpl} rpcImpl RPC implementation\",\r\n        \"@param {boolean} [requestDelimited=false] Whether requests are length-delimited\",\r\n        \"@param {boolean} [responseDelimited=false] Whether responses are length-delimited\"\r\n    ]);\r\n    push(\"function \" + name(service.name) + \"(rpcImpl, requestDelimited, responseDelimited) {\");\r\n    ++indent;\r\n    push(\"$protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\");\r\n    --indent;\r\n    push(\"}\");\r\n    push(\"\");\r\n    push(\"(\" + name(service.name) + \".prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = \" + name(service.name) + \";\");\r\n\r\n    if (config.create) {\r\n        push(\"\");\r\n        pushComment([\r\n            \"Creates new \" + service.name + \" service using the specified rpc implementation.\",\r\n            \"@param {$protobuf.RPCImpl} rpcImpl RPC implementation\",\r\n            \"@param {boolean} [requestDelimited=false] Whether requests are length-delimited\",\r\n            \"@param {boolean} [responseDelimited=false] Whether responses are length-delimited\",\r\n            \"@returns {\" + name(service.name) + \"} RPC service. Useful where requests and/or responses are streamed.\"\r\n        ]);\r\n        push(name(service.name) + \".create = function create(rpcImpl, requestDelimited, responseDelimited) {\");\r\n            ++indent;\r\n            push(\"return new this(rpcImpl, requestDelimited, responseDelimited);\");\r\n            --indent;\r\n        push(\"};\");\r\n    }\r\n\r\n    service.methodsArray.forEach(function(method) {\r\n        method.resolve();\r\n        var lcName = method.name.substring(0, 1).toLowerCase() + method.name.substring(1);\r\n        push(\"\");\r\n        var cbName = name(service.name) + \"_\" + name(lcName) + \"_Callback\";\r\n        pushComment([\r\n            \"Callback as used by {@link \" + name(service.name) + \"#\" + name(lcName) + \"}.\",\r\n            // This is a more specialized version of protobuf.rpc.ServiceCallback\r\n            \"@typedef \" + cbName,\r\n            \"@type {function}\",\r\n            \"@param {?Error} error Error, if any\",\r\n            \"@param {\" + method.resolvedResponseType.fullName.substring(1) + \"} [response] \" + method.resolvedResponseType.name\r\n        ]);\r\n        push(\"\");\r\n        pushComment([\r\n            method.comment || \"Calls \" + method.name + \".\",\r\n            \"@param {\" + method.resolvedRequestType.fullName.substring(1) + \"|Object.<string,*>} request \" + method.resolvedRequestType.name + \" message or plain object\",\r\n            \"@param {\" + cbName + \"} callback Node-style callback called with the error, if any, and \" + method.resolvedResponseType.name,\r\n            \"@returns {undefined}\"\r\n        ]);\r\n        push(name(service.name) + \".prototype\" + util.safeProp(lcName) + \" = function \" + name(lcName) + \"(request, callback) {\");\r\n            ++indent;\r\n            push(\"return this.rpcCall(\" + name(lcName) + \", $root\" + method.resolvedRequestType.fullName + \", $root\" + method.resolvedResponseType.fullName + \", request, callback);\");\r\n            --indent;\r\n        push(\"};\");\r\n        if (config.comments)\r\n            push(\"\");\r\n        pushComment([\r\n            method.comment || \"Calls \" + method.name + \".\",\r\n            \"@name \" + name(service.name) + \"#\" + lcName,\r\n            \"@function\",\r\n            \"@param {\" + method.resolvedRequestType.fullName.substring(1) + \"|Object.<string,*>} request \" + method.resolvedRequestType.name + \" message or plain object\",\r\n            \"@returns {Promise<\"+method.resolvedResponseType.fullName.substring(1)+\">} Promise\",\r\n            \"@variation 2\"\r\n        ]);\r\n    });\r\n}\r\n\r\nfunction buildEnum(ref, enm) {\r\n    var parentFullName = enm.parent.fullName.substring(1);\r\n    push(\"\");\r\n    var comment = [\r\n        enm.comment || enm.name + \" enum.\",\r\n    ];\r\n    if (parentFullName.length) // member\r\n        comment.push(\r\n            \"@name \" + name(enm.name),\r\n            \"@memberof \" + parentFullName,\r\n            \"@enum {number}\"\r\n        );\r\n    else // export\r\n        comment.push(\r\n            \"@exports \" + name(enm.name),\r\n            \"@enum {number}\"\r\n        );\r\n    Object.keys(enm.values).forEach(function(key) {\r\n        var val = enm.values[key];\r\n        comment.push(\"@property {number} \" + key + \"=\" + val + \" \" + (enm.comments[key] || key + \" value\"));\r\n    });\r\n    pushComment(comment);\r\n    push(name(ref) + \".\" + name(enm.name) + \" = (function() {\");\r\n    ++indent;\r\n        push((config.es6 ? \"const\" : \"var\") + \" valuesById = {}, values = Object.create(valuesById);\");\r\n        var aliased = [];\r\n        Object.keys(enm.values).forEach(function(key) {\r\n            var val = enm.values[key];\r\n            if (aliased.indexOf(val) > -1)\r\n                push(\"values[\" + JSON.stringify(key) + \"] = \" + val + \";\");\r\n            else {\r\n                push(\"values[valuesById[\" + val + \"] = \" + JSON.stringify(key) + \"] = \" + val + \";\");\r\n                aliased.push(val);\r\n            }\r\n        });\r\n        push(\"return values;\");\r\n    --indent;\r\n    push(\"})();\");\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/targets/static-module.js":"\"use strict\";\r\nmodule.exports = static_module_target;\r\n\r\n// - The default wrapper supports AMD, CommonJS and the global scope (as window.root), in this order.\r\n// - You can specify a custom wrapper with the --wrap argument.\r\n// - CommonJS modules depend on the minimal build for reduced package size with browserify.\r\n// - AMD and global scope depend on the full library for now.\r\n\r\nvar util = require(\"../util\");\r\n\r\nvar protobuf = require(\"../..\");\r\n\r\nstatic_module_target.description = \"Static code without reflection as a module\";\r\n\r\nfunction static_module_target(root, options, callback) {\r\n    require(\"./static\")(root, options, function(err, output) {\r\n        if (err) {\r\n            callback(err);\r\n            return;\r\n        }\r\n        try {\r\n            output = util.wrap(output, protobuf.util.merge({ dependency: \"protobufjs/minimal\" }, options));\r\n        } catch (e) {\r\n            callback(e);\r\n            return;\r\n        }\r\n        callback(null, output);\r\n    });\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/wrappers/amd.js":"define([\"protobuf\"], function($protobuf) {\r\n    \"use strict\";\r\n\r\n    $OUTPUT;\r\n\r\n    return $root;\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/wrappers/commonjs.js":"\"use strict\";\r\n\r\nvar $protobuf = require($DEPENDENCY);\r\n\r\n$OUTPUT;\r\n\r\nmodule.exports = $root;\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/wrappers/default.js":"(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobuf\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require($DEPENDENCY));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    $OUTPUT;\n\n    return $root;\n});\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/wrappers/es6.js":"import * as $protobuf from \"protobufjs\";\r\n\r\n$OUTPUT;\r\n\r\nexport { $root as default };\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/cli/lib/tsd-jsdoc/publish.js":"\"use strict\";\r\n\r\nvar fs = require(\"fs\");\r\n\r\n// output stream\r\nvar out = null;\r\n\r\n// documentation data\r\nvar data = null;\r\n\r\n// already handled objects, by name\r\nvar seen = {};\r\n\r\n// indentation level\r\nvar indent = 0;\r\n\r\n// whether indent has been written for the current line yet\r\nvar indentWritten = false;\r\n\r\n// provided options\r\nvar options = {};\r\n\r\n// queued interfaces\r\nvar queuedInterfaces = [];\r\n\r\n// whether writing the first line\r\nvar firstLine = true;\r\n\r\n// JSDoc hook\r\nexports.publish = function publish(taffy, opts) {\r\n    options = opts || {};\r\n\r\n    // query overrides options\r\n    if (options.query)\r\n        Object.keys(options.query).forEach(function(key) {\r\n            if (key !== \"query\")\r\n                switch (options[key] = options.query[key]) {\r\n                    case \"true\":\r\n                        options[key] = true;\r\n                        break;\r\n                    case \"false\":\r\n                        options[key] = false;\r\n                        break;\r\n                    case \"null\":\r\n                        options[key] = null;\r\n                        break;\r\n                }\r\n        });\r\n\r\n    // remove undocumented\r\n    taffy({ undocumented: true }).remove();\r\n    taffy({ ignore: true }).remove();\r\n    taffy({ inherited: true }).remove();\r\n\r\n    // remove private\r\n    if (!options.private)\r\n        taffy({ access: \"private\" }).remove();\r\n\r\n    // setup output\r\n    out = options.destination\r\n        ? fs.createWriteStream(options.destination)\r\n        : process.stdout;\r\n\r\n    try {\r\n        // setup environment\r\n        data = taffy().get();\r\n        indent = 0;\r\n        indentWritten = false;\r\n        firstLine = true;\r\n\r\n        // wrap everything in a module if configured\r\n        if (options.module) {\r\n            writeln(\"export = \", options.module, \";\");\r\n            writeln();\r\n            writeln(\"declare namespace \", options.module, \" {\");\r\n            writeln();\r\n            ++indent;\r\n        }\r\n\r\n        // handle all\r\n        getChildrenOf(undefined).forEach(function(child) {\r\n            handleElement(child, null);\r\n        });\r\n\r\n        // process queued\r\n        while (queuedInterfaces.length) {\r\n            var element = queuedInterfaces.shift();\r\n            begin(element);\r\n            writeInterface(element);\r\n            writeln(\";\");\r\n        }\r\n\r\n        // end wrap\r\n        if (options.module) {\r\n            --indent;\r\n            writeln(\"}\");\r\n        }\r\n\r\n        // close file output\r\n        if (out !== process.stdout)\r\n            out.end();\r\n\r\n    } finally {\r\n        // gc environment objects\r\n        out = data = null;\r\n        seen = options = {};\r\n        queuedInterfaces = [];\r\n    }\r\n};\r\n\r\n//\r\n// Utility\r\n//\r\n\r\n// writes one or multiple strings\r\nfunction write() {\r\n    var s = Array.prototype.slice.call(arguments).join(\"\");\r\n    if (!indentWritten) {\r\n        for (var i = 0; i < indent; ++i)\r\n            s = \"    \" + s;\r\n        indentWritten = true;\r\n    }\r\n    out.write(s);\r\n    firstLine = false;\r\n}\r\n\r\n// writes zero or multiple strings, followed by a new line\r\nfunction writeln() {\r\n    var s = Array.prototype.slice.call(arguments).join(\"\");\r\n    if (s.length)\r\n        write(s, \"\\n\");\r\n    else if (!firstLine)\r\n        out.write(\"\\n\");\r\n    indentWritten = false;\r\n}\r\n\r\n// writes a comment\r\nfunction writeComment(comment, otherwiseNewline) {\r\n    if (!comment || options.comments === false) {\r\n        if (otherwiseNewline)\r\n            writeln();\r\n        return;\r\n    }\r\n    var first = true;\r\n    comment.split(/\\r?\\n/g).forEach(function(line) {\r\n        line = line.trim().replace(/^\\*/, \" *\");\r\n        if (line.length) {\r\n            if (first) {\r\n                writeln();\r\n                first = false;\r\n            }\r\n            writeln(line);\r\n        }\r\n    });\r\n}\r\n\r\n// recursively replaces all occurencies of re's match\r\nfunction replaceRecursive(name, re, fn) {\r\n    var found;\r\n\r\n    function replacer() {\r\n        found = true;\r\n        return fn.apply(null, arguments);\r\n    }\r\n\r\n    do {\r\n        found = false;\r\n        name = name.replace(re, replacer);\r\n    } while (found);\r\n    return name;\r\n}\r\n\r\n// tests if an element is considered to be a class or class-like\r\nfunction isClassLike(element) {\r\n    return element && (element.kind === \"class\" || element.kind === \"interface\" || element.kind === \"mixin\");\r\n}\r\n\r\n// tests if an element is considered to be an interface\r\nfunction isInterface(element) {\r\n    return element && element.kind === \"interface\";\r\n}\r\n\r\n// tests if an element is considered to be a namespace\r\nfunction isNamespace(element) {\r\n    return element && (element.kind === \"namespace\" || element.kind === \"module\");\r\n}\r\n\r\n// gets all children of the specified parent\r\nfunction getChildrenOf(parent) {\r\n    var memberof = parent ? parent.longname : undefined;\r\n    return data.filter(function(element) {\r\n        return element.memberof === memberof;\r\n    });\r\n}\r\n\r\n// gets the literal type of an element\r\nfunction getTypeOf(element) {\r\n    var name = \"any\";\r\n    var type = element.type;\r\n    if (type && type.names && type.names.length) {\r\n        if (type.names.length === 1)\r\n            name = element.type.names[0].trim();\r\n        else\r\n            name = \"(\" + element.type.names.join(\"|\") + \")\";\r\n    } else\r\n        return name;\r\n\r\n    // Replace catchalls with any\r\n    name = name.replace(/\\*|\\bmixed\\b/g, \"any\");\r\n\r\n    // Ensure upper case Object for map expressions below\r\n    name = name.replace(/\\bobject\\b/g, \"Object\");\r\n\r\n    // Correct Promise.<Something> to Promise<Something>\r\n    name = replaceRecursive(name, /\\bPromise\\.<([^>]*)>/gi, function($0, $1) {\r\n        return \"Promise<\" + $1 + \">\";\r\n    });\r\n\r\n    // Replace Array.<string> with string[]\r\n    name = replaceRecursive(name, /\\bArray\\.?<([^>]*)>/gi, function($0, $1) {\r\n        return $1 + \"[]\";\r\n    });\r\n\r\n    // Replace Object.<string,number> with { [k: string]: number }\r\n    name = replaceRecursive(name, /\\bObject\\.?<([^,]*), *([^>]*)>/gi, function($0, $1, $2) {\r\n        return \"{ [k: \" + $1 + \"]: \" + $2 + \" }\";\r\n    });\r\n\r\n    // Replace functions (there are no signatures) with () => any\r\n    name = name.replace(/\\bfunction(?:\\(\\))?([^\\w]|$)/gi, \"() => any\");\r\n\r\n    // Convert plain Object back to just object\r\n    if (name === \"Object\")\r\n        name = \"object\";\r\n\r\n    return name;\r\n}\r\n\r\n// begins writing the definition of the specified element\r\nfunction begin(element, is_interface) {\r\n    writeComment(element.comment, is_interface || isInterface(element) || isClassLike(element) || isNamespace(element) || element.isEnum);\r\n    if (element.scope !== \"global\" || options.module || is_interface || isInterface(element))\r\n        return;\r\n    write(\"export \");\r\n}\r\n\r\n// writes the function signature describing element\r\nfunction writeFunctionSignature(element, isConstructor, isTypeDef) {\r\n    write(\"(\");\r\n\r\n    var params = {};\r\n\r\n    // this type\r\n    if (element.this)\r\n        params[\"this\"] = {\r\n            type: element.this.replace(/^{|}$/g, \"\"),\r\n            optional: false\r\n        };\r\n\r\n    // parameter types\r\n    if (element.params)\r\n        element.params.forEach(function(param) {\r\n            var path = param.name.split(/\\./g);\r\n            if (path.length === 1)\r\n                params[param.name] = {\r\n                    type: getTypeOf(param),\r\n                    variable: param.variable === true,\r\n                    optional: param.optional === true,\r\n                    defaultValue: param.defaultvalue // Not used yet (TODO)\r\n                };\r\n            else // Property syntax (TODO)\r\n                params[path[0]].type = \"{ [k: string]: any }\";\r\n        });\r\n\r\n    var paramNames = Object.keys(params);\r\n    paramNames.forEach(function(name, i) {\r\n        var param = params[name];\r\n        var type = param.type;\r\n        if (param.variable) {\r\n            name = \"...\" + name;\r\n            type = param.type.charAt(0) === \"(\" ? \"any[]\" : param.type + \"[]\";\r\n        }\r\n        write(name, !param.variable && param.optional ? \"?: \" : \": \", type);\r\n        if (i < paramNames.length - 1)\r\n            write(\", \");\r\n    });\r\n\r\n    write(\")\");\r\n\r\n    // return type\r\n    if (!isConstructor) {\r\n        write(isTypeDef ? \" => \" : \": \");\r\n        var typeName;\r\n        if (element.returns && element.returns.length && (typeName = getTypeOf(element.returns[0])) !== \"undefined\")\r\n            write(typeName);\r\n        else\r\n            write(\"void\");\r\n    }\r\n}\r\n\r\n// writes (a typedef as) an interface\r\nfunction writeInterface(element) {\r\n    write(\"interface \", element.name);\r\n    writeInterfaceBody(element);\r\n    writeln();\r\n}\r\n\r\nfunction writeInterfaceBody(element) {\r\n    writeln(\"{\");\r\n    ++indent;\r\n    element.properties.forEach(writeProperty);\r\n    --indent;\r\n    write(\"}\");\r\n}\r\n\r\nfunction writeProperty(property) {\r\n    writeComment(property.comment);\r\n    write(property.name);\r\n    if (property.optional)\r\n        write(\"?\");\r\n    writeln(\": \", getTypeOf(property), \";\");\r\n}\r\n\r\n//\r\n// Handlers\r\n//\r\n\r\n// handles a single element of any understood type\r\nfunction handleElement(element, parent, insideClass) {\r\n    if (element.optional !== true && element.type && element.type.names && element.type.names.length) {\r\n        for (var i = 0; i < element.type.names.length; i++) {\r\n            if (element.type.names[i].toLowerCase() === \"undefined\") {\r\n                // This element is actually optional. Set optional to true and\r\n                // remove the 'undefined' type\r\n                element.optional = true;\r\n                element.type.names.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (seen[element.longname])\r\n        return true;\r\n    if (isClassLike(element)) {\r\n        if (insideClass)\r\n            return false;\r\n        handleClass(element, parent);\r\n    } else switch (element.kind) {\r\n        case \"module\":\r\n        case \"namespace\":\r\n            if (insideClass)\r\n                return false;\r\n            handleNamespace(element, parent);\r\n            break;\r\n        case \"constant\":\r\n        case \"member\":\r\n            if (insideClass && element.isEnum)\r\n                return false;\r\n            handleMember(element, parent);\r\n            break;\r\n        case \"function\":\r\n            handleFunction(element, parent);\r\n            break;\r\n        case \"typedef\":\r\n            if (insideClass)\r\n                return false;\r\n            handleTypeDef(element, parent);\r\n            break;\r\n        case \"package\":\r\n            break;\r\n    }\r\n    seen[element.longname] = element;\r\n    return true;\r\n}\r\n\r\n// handles (just) a namespace\r\nfunction handleNamespace(element/*, parent*/) {\r\n    begin(element);\r\n    writeln(\"namespace \", element.name, \" {\");\r\n    ++indent;\r\n    getChildrenOf(element).forEach(function(child) {\r\n        handleElement(child, element);\r\n    });\r\n    --indent;\r\n    writeln(\"}\");\r\n}\r\n\r\n// a filter function to remove any module references\r\nfunction notAModuleReference(ref) {\r\n    return ref.indexOf(\"module:\") === -1;\r\n}\r\n\r\n\r\n// handles a class or class-like\r\nfunction handleClass(element, parent) {\r\n    var is_interface = isInterface(element);\r\n    begin(element, is_interface);\r\n    if (is_interface)\r\n        write(\"interface \");\r\n    else {\r\n        if (element.virtual)\r\n            write(\"abstract \");\r\n        write(\"class \");\r\n    }\r\n    write(element.name, \" \");\r\n\r\n    // extended classes\r\n    if (element.augments) {\r\n        var augments = element.augments.filter(notAModuleReference);\r\n        if (augments.length)\r\n            write(\"extends \", augments[0], \" \");\r\n    }\r\n\r\n    // implemented interfaces\r\n    var impls = [];\r\n    if (element.implements)\r\n        Array.prototype.push.apply(impls, element.implements);\r\n    if (element.mixes)\r\n        Array.prototype.push.apply(impls, element.mixes);\r\n    impls = impls.filter(notAModuleReference);\r\n    if (impls.length)\r\n        write(\"implements \", impls.join(\", \"), \" \");\r\n\r\n    writeln(\"{\");\r\n    ++indent;\r\n\r\n    // constructor\r\n    if (!is_interface && !element.virtual)\r\n        handleFunction(element, parent, true);\r\n\r\n    // properties\r\n    if (is_interface && element.properties)\r\n        element.properties.forEach(writeProperty);\r\n\r\n    // class-compatible members\r\n    var incompatible = [];\r\n    getChildrenOf(element).forEach(function(child) {\r\n        if (!handleElement(child, element, true))\r\n            incompatible.push(child);\r\n    });\r\n\r\n    --indent;\r\n    writeln(\"}\");\r\n\r\n    // class-incompatible members\r\n    if (incompatible.length) {\r\n        writeln();\r\n        if (element.scope === \"global\" && !options.module)\r\n            write(\"export \");\r\n        writeln(\"namespace \", element.name, \" {\");\r\n        ++indent;\r\n        incompatible.forEach(function(child) {\r\n            handleElement(child, element);\r\n        });\r\n        --indent;\r\n        writeln(\"}\");\r\n    }\r\n}\r\n\r\n// handles a namespace or class member\r\nfunction handleMember(element, parent) {\r\n    begin(element);\r\n\r\n    if (element.isEnum) {\r\n\r\n        writeln(\"enum \", element.name, \" {\");\r\n        ++indent;\r\n        element.properties.forEach(function(property, i) {\r\n            write(property.name);\r\n            if (property.defaultvalue !== undefined)\r\n                write(\" = \", JSON.stringify(property.defaultvalue));\r\n            if (i < element.properties.length - 1)\r\n                writeln(\",\");\r\n            else\r\n                writeln();\r\n        });\r\n        --indent;\r\n        writeln(\"}\");\r\n\r\n    } else {\r\n\r\n        if (isClassLike(parent)) {\r\n            write(element.access || \"public\", \" \");\r\n            if (element.scope === \"static\")\r\n                write(\"static \");\r\n            if (element.readonly)\r\n                write(\"readonly \");\r\n        } else\r\n            write(element.kind === \"constant\" ? \"const \" : \"let \");\r\n\r\n        write(element.name);\r\n        if (element.optional)\r\n            write(\"?\");\r\n        write(\": \");\r\n\r\n        if (element.type && element.type.names && /^Object\\b/i.test(element.type.names[0]) && element.properties) {\r\n            writeln(\"{\");\r\n            ++indent;\r\n            element.properties.forEach(function(property, i) {\r\n                writeln(JSON.stringify(property.name), \": \", getTypeOf(property), i < element.properties.length - 1 ? \",\" : \"\");\r\n            });\r\n            --indent;\r\n            writeln(\"};\");\r\n        } else\r\n            writeln(getTypeOf(element), \";\");\r\n    }\r\n}\r\n\r\n// handles a function or method\r\nfunction handleFunction(element, parent, isConstructor) {\r\n    if (isConstructor) {\r\n        writeComment(element.comment);\r\n        write(\"constructor\");\r\n    } else {\r\n        begin(element);\r\n        if (isClassLike(parent)) {\r\n            write(element.access || \"public\", \" \");\r\n            if (element.scope === \"static\")\r\n                write(\"static \");\r\n        } else\r\n            write(\"function \");\r\n        write(element.name);\r\n    }\r\n    writeFunctionSignature(element, isConstructor, false);\r\n    writeln(\";\");\r\n}\r\n\r\n// handles a type definition (not a real type)\r\nfunction handleTypeDef(element, parent) {\r\n    if (isInterface(element)) {\r\n        if (isClassLike(parent))\r\n            queuedInterfaces.push(element);\r\n        else {\r\n            begin(element);\r\n            writeInterface(element);\r\n        }\r\n    } else {\r\n        // see: https://github.com/dcodeIO/protobuf.js/issues/737\r\n        // begin(element, true);\r\n        writeln();\r\n        write(\"type \", element.name, \" = \");\r\n        var type = getTypeOf(element);\r\n        if (element.type && element.type.names.length === 1 && element.type.names[0] === \"function\")\r\n            writeFunctionSignature(element, false, true);\r\n        else if (type === \"object\") {\r\n            if (element.properties && element.properties.length)\r\n                writeInterfaceBody(element);\r\n            else\r\n                write(\"{}\");\r\n        } else\r\n            write(type);\r\n        writeln(\";\");\r\n    }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/deep-equal/lib/is_arguments.js":"var supportsArgumentsClass = (function(){\r\n  return Object.prototype.toString.call(arguments)\r\n})() == '[object Arguments]';\r\n\r\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\r\n\r\nexports.supported = supported;\r\nfunction supported(object) {\r\n  return Object.prototype.toString.call(object) == '[object Arguments]';\r\n};\r\n\r\nexports.unsupported = unsupported;\r\nfunction unsupported(object){\r\n  return object &&\r\n    typeof object == 'object' &&\r\n    typeof object.length == 'number' &&\r\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\r\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\r\n    false;\r\n};","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/deep-equal/lib/keys.js":"exports = module.exports = typeof Object.keys === 'function'\r\n  ? Object.keys : shim;\r\n\r\nexports.shim = shim;\r\nfunction shim (obj) {\r\n  var keys = [];\r\n  for (var key in obj) keys.push(key);\r\n  return keys;\r\n}","/home/travis/build/npmtest/node-npmtest-protobufjs/node_modules/protobufjs/lib/float/bench/suite.js":"\"use strict\";\r\nmodule.exports = newSuite;\r\n\r\nvar benchmark = require(\"benchmark\"),\r\n    chalk     = require(\"chalk\");\r\n\r\nvar padSize = 20;\r\n\r\nfunction newSuite(name) {\r\n    var benches = [];\r\n    return new benchmark.Suite(name)\r\n    .on(\"add\", function(event) {\r\n        benches.push(event.target);\r\n    })\r\n    .on(\"start\", function() {\r\n        process.stdout.write(\"benchmarking \" + name + \" performance ...\\n\\n\");\r\n    })\r\n    .on(\"cycle\", function(event) {\r\n        process.stdout.write(String(event.target) + \"\\n\");\r\n    })\r\n    .on(\"complete\", function() {\r\n        if (benches.length > 1) {\r\n            var fastest = this.filter(\"fastest\"), // eslint-disable-line no-invalid-this\r\n                fastestHz = getHz(fastest[0]);\r\n            process.stdout.write(\"\\n\" + chalk.white(pad(fastest[0].name, padSize)) + \" was \" + chalk.green(\"fastest\") + \"\\n\");\r\n            benches.forEach(function(bench) {\r\n                if (fastest.indexOf(bench) === 0)\r\n                    return;\r\n                var hz = hz = getHz(bench);\r\n                var percent = (1 - hz / fastestHz) * 100;\r\n                process.stdout.write(chalk.white(pad(bench.name, padSize)) + \" was \" + chalk.red(percent.toFixed(1) + \"% slower\") + \"\\n\");\r\n            });\r\n        }\r\n        process.stdout.write(\"\\n\");\r\n    });\r\n}\r\n\r\nfunction getHz(bench) {\r\n    return 1 / (bench.stats.mean + bench.stats.moe);\r\n}\r\n\r\nfunction pad(str, len, l) {\r\n    while (str.length < len)\r\n        str = l ? str + \" \" : \" \" + str;\r\n    return str;\r\n}\r\n"}